describeBy(data2,2)
data6 <- perf.cart[perf.cart[,1] == 6,]
describeBy(data6,2)
data7 <- perf.cart[perf.cart[,1] == 7,]
describeBy(data7,2)
data9 <- perf.cart[perf.cart[,1] == 9,]
describeBy(data9,2)
data11 <- perf.cart[perf.cart[,1] == 11,]
describeBy(data11,2)
data13 <- perf.cart[perf.cart[,1] == 13,]
describeBy(data13,2)
data15 <- perf.cart[perf.cart[,1] == 15,]
describeBy(data15,2)
data16 <- perf.cart[perf.cart[,1] == 16,]
describeBy(data16,2)
data17 <- perf.cart[perf.cart[,1] == 17,]
describeBy(data17,2)
data20 <- perf.cart[perf.cart[,1] == 20,]
describeBy(data20,2)
load("C:/Users/RJacobucci/Dropbox/dtree_sim_results/sim1_missing_logreg.Rdata")
first <- list(res.nodes,res.nsplits,res.nvar,res.perf,res.stab) # sim1_missing_logreg
load("C:/Users/RJacobucci/Dropbox/dtree_sim_results/sim1_missing_logreg2.Rdata")
second <- list(res.nodes,res.nsplits,res.nvar,res.perf,res.stab) # sim1_missing_logreg2
nodes.logreg <- rbind(first[[1]],second[[1]])
nsplits.logreg <- rbind(first[[2]],second[[2]])
nvar.logreg <- rbind(first[[3]],second[[3]])
perf.logreg <- rbind(first[[4]],second[[4]])
stab.logreg <- rbind(first[[5]],second[[5]])
data2 <- perf.logreg[perf.logreg[,1] == 2,]
library(psych)
describeBy(data2,2)
data6 <- perf.logreg[perf.logreg[,1] == 6,]
describeBy(data6,2)
data7 <- perf.logreg[perf.logreg[,1] == 7,]
describeBy(data7,2)
data8 <- perf.logreg[perf.logreg[,1] == 8,]
describeBy(data8,2)
data9 <- perf.logreg[perf.logreg[,1] == 9,]
describeBy(data9,2)
data7 <- perf.logreg[perf.logreg[,1] == 7,]
describeBy(data7,2)
data9 <- perf.logreg[perf.logreg[,1] == 9,]
describeBy(data9,2)
data11 <- perf.logreg[perf.logreg[,1] == 11,]
describeBy(data11,2)
data13 <- perf.logreg[perf.logreg[,1] == 13,]
describeBy(data13,2)
data15 <- perf.logreg[perf.logreg[,1] == 15,]
describeBy(data15,2)
data16 <- perf.logreg[perf.logreg[,1] == 16,]
describeBy(data16,2)
data17 <- perf.logreg[perf.logreg[,1] == 17,]
describeBy(data17,2)
data20 <- perf.logreg[perf.logreg[,1] == 20,]
describeBy(data20,2)
load("C:/Users/RJacobucci/Dropbox/dtree_sim_results/rf_run111.Rdata")
res.out
load("C:/Users/RJacobucci/Dropbox/dtree_sim_results/rf_run111.Rdata")
load("C:/Users/RJacobucci/Dropbox/dtree_sim_results/rf_run111.Rdata")
library(MASS);library(lavaan);library(psych);library(ISLR);library(dtree)
####
HS <- HolzingerSwineford1939[complete.cases(HolzingerSwineford1939),-c(1,4)]
names(HS)[3] <- "y"
HS$y <- as.factor(HS$y)
HS$sex <- as.factor(HS$sex)
HS$ageyr <- as.factor(HS$ageyr)
HS$grade <- as.factor(HS$grade)
HS[,5:13] <- round(HS[,5:13],1)
levels(HS$y) <- c("GW","P")
####
FB2 <- FacialBurns[,-c(2)]
names(FB2)[1] <- "y"
FB2$Sex <- as.factor(FB2$Sex)
#####
bfi2 <- bfi[complete.cases(bfi),-c(27:28)]
bfi2$gender <- as.factor(bfi2$gender)
names(bfi2)[26] <- "y"
levels(bfi2$y) <- c("M","F")
#####
eb2 <- epi.bfi[,1:11]
names(eb2)[11] <- "y"
#####
names(crabs)[1] <- "y"
crabs2 <- crabs[,-c(2,3)]
#####
names(Wage)[12] <- "y"
Wage2 <- Wage[1:1000,-11]
#####
names(cats)[1] <- "y"
#####
Cars932 <- Cars93[complete.cases(Cars93),-c(1,2,27)]
# predict origin
names(Cars932)[24] <- "y"
levels(Cars932$y) <- c("USA","nUSA")
######
Boston$chas <- as.factor(Boston$chas)
names(Boston)[14] <- "y"
######
birthwt2 <- birthwt[,-10]
birthwt2$low <- as.factor(birthwt2$low)
names(birthwt2)[1] <- "y"
birthwt2$ptl<- as.factor(birthwt2$ptl)
birthwt2$ht <- as.factor(birthwt2$ht)
birthwt2$ui <- as.factor(birthwt2$ui)
birthwt2$ftv <- as.factor(birthwt2$ftv)
levels(birthwt2$y) <- c("low","high")
######
biopsy2 <- biopsy[complete.cases(biopsy),-c(1)]
names(biopsy2)[10] <- "y"
#levels(biopsy2$y) <- c("1","2")
######
names(College)[2] <- "y" #Apps
#####
names(quine)[5] <- "y"
#####
names(Pima.tr)[8] <- "y"
#####
OME2 <- OME[,-1]
OME2$y <- OME2$Correct/OME2$Trials
OME3 <- OME2[,-c(5:6)]
#####
nlschools2 <- nlschools[1:1000,-3]
names(nlschools2)[1] <- "y"
str(nlschools2)
#####
names(minn38)[2] <- "y"
minn382 <- minn38[,-5]
levels(minn382$y) <- c("C","N","N","N")
#####
names(swiss)[1] <- "y" #fertility
######
names(Default)[1] <- "y"
Default2 <- Default[1:2000,]
#####
library(caret)
data(Sacramento)
str(Sacramento)
names(Sacramento)[7] <- "y"
Sacramento2 <- Sacramento[,-c(1,2,8:9)]
Sacramento2$y <- round(Sacramento2$y,-4)
Sacramento2$sqft <- round(Sacramento2$sqft,-2)
############ data
library(beepr)
dat.list <- list(HS,FB2,bfi2,crabs2,eb2,Wage2,cats,Cars932,Boston,
birthwt2,biopsy2,College,quine,Pima.tr,OME3,nlschools2,minn382,
swiss,Default2,Sacramento2)
# problems with nlschools, error with minn382
memory.limit(size = 250000)
res.out <- list()
# problem with the third dataset
for(i in 17){
res.out[[i]] <- dtree(y~., dat.list[[i]],methods=c("rf"),samp.method="cv",tuneLength=3)
save.image("rf_run111.Rdata")
print(i)
}
res.out
summary(minn382)
out <- train(y ~ ., minn382,method="rf")
out
setwd("C:/Users/RJacobucci/Google Drive/NSSI Frequency SEM Tree (1 predictor)")
library(foreign)
data <- read.spss("NSSIFreqDT_3.25.17.sav")
data2 <- data.frame(data)
sub<- c("FREQNSSIactsYear", "FREQNSSIact_Win","TotNSSImethods","NSSIonset","NSSIrecency","FAFSI_15","FAFSI_16")
dat.sub<- data2[,sub]
dat.sub[dat.sub==-999] <- NA
library(psych);library(caret)
describe(dat.sub)
library(lavaan)
mod <- "
f1 =~ FREQNSSIact_Win + TotNSSImethods+ NSSIonset+NSSIrecency+FAFSI_15+FAFSI_16
"
cfa.out <- cfa(mod,dat.sub)
summary(cfa.out)
summary(cfa.out,fit=T)
?preProcess
View(FB2)
setwd("C:/Users/RJacobucci/Google Drive/NSSI Frequency SEM Tree (1 predictor)")
library(foreign)
data <- read.spss("NSSIFreqDT_3.25.17.sav")
data2 <- data.frame(data)
sub<- c("FREQNSSIactsYear", "FREQNSSIact_Win","TotNSSImethods","NSSIonset","NSSIrecency","FAFSI_15","FAFSI_16")
#sub %in% colnames(data2)
dat.sub<- data2[,sub]
dat.sub[dat.sub==-999] <- NA
library(psych);library(caret)
describe(dat.sub)
dat.sub3 <- preProcess(dat.sub2[,2:7],method=c("BoxCox"),na.remove=FALSE,)
dat.sub2 <- dat.sub
?preProcess
dat.sub3 <- preProcess(dat.sub2[,2:7],method=c("BoxCox"),na.remove=FALSE,)
dat.sub3 <- preProcess(dat.sub2,outcome="FREQNSSIactsYear",method=c("BoxCox"),na.remove=FALSE,)
dat.sub3 <- preProcess(dat.sub2,outcome="FREQNSSIactsYear",method=c("BoxCox"),na.remove=FALSE)
dat.sub3 <- preProcess(dat.sub2,outcome="FREQNSSIactsYear",method=c("BoxCox"))
summary(dat.sub3)
dat.sub3
dat.sub4 <- predict(dat.sub3)
dat.sub4 <- predict(dat.sub3,dat.sub2)
summary(dat.sub4)
cfa.out <- cfa(mod,dat.sub4)
library(lavaan)
mod <- "
f1 =~ FREQNSSIact_Win + TotNSSImethods+ NSSIonset+NSSIrecency+FAFSI_15+FAFSI_16
"
cfa.out <- cfa(mod,dat.sub4)
summary(cfa.out,fit=T)
describe(dat.sub4)
dat.sub<- data2[complete.cases(data2),sub]
dat.sub[dat.sub==-999] <- NA
library(psych);library(caret)
describe(dat.sub)
dat.sub2 <- dat.sub
?preProcess
dat.sub3 <- preProcess(dat.sub2,outcome="FREQNSSIactsYear",method=c("BoxCox"))
warnings()
dat.sub4 <- predict(dat.sub3,dat.sub2)
describe(dat.sub4)
complete.cases(data2)
dat.sub<- data2[,sub]
dat.sub[dat.sub==-999] <- NA
dat.sub <- dat.sub[complete.cases(dat.sub),]
library(psych);library(caret)
describe(dat.sub)
dat.sub2 <- dat.sub
?preProcess
dat.sub3 <- preProcess(dat.sub2,outcome="FREQNSSIactsYear",method=c("BoxCox"))
dat.sub4 <- predict(dat.sub3,dat.sub2)
describe(dat.sub4)
describe(dat.sub2)
str(dat.sub2)
hist(dat.sub4$FAFSI_15)
hist(log(dat.sub4$FAFSI_15))
dat.sub4$FAFSI_15 <- log(dat.sub4$FAFSI_15)
summary(dat.sub4)
dat.sub4 <- predict(dat.sub3,dat.sub2)
dat.sub4$FAFSI_15 <- log(dat.sub4$FAFSI_15+.001)
summary(dat.sub4)
dat.sub4$FAFSI_15 <- log(dat.sub4$FAFSI_15+.001)
dat.sub4 <- predict(dat.sub3,dat.sub2)
dat.sub4$FAFSI_15 <- log(dat.sub4$FAFSI_15+.001)
describe(dat.sub4)
library(lavaan)
mod <- "
f1 =~ FREQNSSIact_Win + TotNSSImethods+ NSSIonset+NSSIrecency+FAFSI_15+FAFSI_16
"
cfa.out <- cfa(mod,dat.sub4,ordered=c("FAFSI_16"))
summary(cfa.out,fit=T)
describe(dat.sub2)
dat.sub2 <- dat.sub
dat.sub2$FAFSI_15 <- log(dat.sub2$FAFSI_15+.001)
hist(log(dat.sub2$FREQNSSIact_Win))
dat.sub2$FREQNSSIact_Win <- log(dat.sub2$FREQNSSIact_Win)
describe(dat.sub2)
library(lavaan)
mod <- "
f1 =~ FREQNSSIact_Win + TotNSSImethods+ NSSIonset+NSSIrecency+FAFSI_15+FAFSI_16
"
cfa.out <- cfa(mod,dat.sub2,ordered=c("FAFSI_16"))
summary(cfa.out,fit=T)
library(semtree)
tree.out <- semtree(cfa.out,dat.sub2)
describe(dat.sub2)
cfa.out <- cfa(mod,dat.sub2,estimator="mlr")
summary(cfa.out,fit=T)
tree.out <- semtree(cfa.out,dat.sub2)
tree.out
plot(tree.out)
?prune.semtree
tree.out2 <- prune(tree.out,3)
tree.out2
?semtree
tree.out <- semtree(cfa.out,dat.sub2,control=semtree.control(method="crossvalidation"))
tree.out <- semtree(cfa.out,dat.sub2,control=semtree.control(method="cv"))
observed = c("FREQNSSIact_Win","TotNSSImethods","NSSIonset","NSSIrecency","FAFSI_15","FAFSI_16")
latents = "f1"
library(OpenMx)
?mxData
cfa<-mxModel("Model", type="RAM",
manifestVars=observed,
latentVars=latents,
mxPath(from=latents, to=observed,
free=c(F,T,T,T,T,T),values=c(1,1,1,1,1,T),labels=c("l1","l2","l3","l4","l5","l6")),
mxPath(from=observed, arrows=2,labels=c("d1","d2","d3","d4","d5","d6")),
mxPath(from=latents, arrows=2,labels=c("p1")),
mxData(dat.sub2),
mxPath(from="one", to=c(latents,observed),
free=c(F,T,T,T,T,T,T),values=c(0,1,1,1,1,1,T),labels=c(NA,"m1","m2","m3","m4","m5","m6"))
)
observed = c("FREQNSSIact_Win","TotNSSImethods","NSSIonset","NSSIrecency","FAFSI_15","FAFSI_16")
latents = "f1"
cfa<-mxModel("Model", type="RAM",
manifestVars=observed,
latentVars=latents,
mxPath(from=latents, to=observed,
free=c(F,T,T,T,T,T),values=c(1,1,1,1,1,T),labels=c("l1","l2","l3","l4","l5","l6")),
mxPath(from=observed, arrows=2,labels=c("d1","d2","d3","d4","d5","d6")),
mxPath(from=latents, arrows=2,labels=c("p1")),
mxData(dat.sub2,type="raw"),
mxPath(from="one", to=c(latents,observed),
free=c(F,T,T,T,T,T,T),values=c(0,1,1,1,1,1,T),labels=c(NA,"m1","m2","m3","m4","m5","m6"))
)
mx.out <- mxRun(cfa)
summary(mx.out)
summary(cfa.out,fit=T)
observed = c("FREQNSSIact_Win","TotNSSImethods","NSSIonset","NSSIrecency","FAFSI_15","FAFSI_16")
latents = "f1"
cfa<-mxModel("Model", type="RAM",
manifestVars=observed,
latentVars=latents,
mxPath(from=latents, to=observed,
free=c(F,T,T,T,T,T),values=c(1,1,1,1,1,1),labels=c("l1","l2","l3","l4","l5","l6")),
mxPath(from=observed, arrows=2,labels=c("d1","d2","d3","d4","d5","d6")),
mxPath(from=latents, arrows=2,labels=c("p1")),
mxData(dat.sub2,type="raw"),
mxPath(from="one", to=c(latents,observed),
free=c(F,T,T,T,T,T,T),values=c(0,1,1,1,1,1,1),labels=c(NA,"m1","m2","m3","m4","m5","m6"))
)
mx.out <- mxRun(cfa)
summary(mx.out)
mx.out <- mxTryHard(cfa)
summary(mx.out)
summary(cfa.out,fit=T)
tree.out <- semtree(cfa.out,dat.sub2,control=semtree.control(method="fair"))
tree.out <- semtree(cfa.out,dat.sub2)
mx.out <- mxRun(cfa)
summary(mx.out)
?mxRun
tree.out
tree.out <- semtree(cfa.out,dat.sub2,control=semtree.control(bonferroni=TRUE))
tree.out
tree.out <- semtree(cfa.out,dat.sub2,control=semtree.control(bonferroni=TRUE,max.depth=3))
tree.out
plot(tree.out)
plot(tree.out)
summary(cfa.out,fit=T)
summary(cfa.out,fit=T)
describe(dat.sub2)
dat.sub2 <- dat.sub
#dat.sub3 <- preProcess(dat.sub2,outcome="FREQNSSIactsYear",method=c("BoxCox"))
#dat.sub4 <- predict(dat.sub3,dat.sub2)
dat.sub2$FAFSI_15 <- log(dat.sub2$FAFSI_15+.001)
dat.sub2$FREQNSSIact_Win <- log(dat.sub2$FREQNSSIact_Win)
cfa.out <- cfa(mod,dat.sub2,estimator="mlr",meanstructure=FALSE)
save.image("semtree_NSSI_Frequency_OnePred.Rdata")
library(foreign)
diag.dat <- read.spss("C:/Users/RJacobucci/Dropbox/dissertation/adams1waveasav/ADAMS1AD_R.sav",
to.data.frame=TRUE)
diag.dat <- read.spss("C:/Users/Ross/Dropbox/dissertation/adams1waveasav/ADAMS1AD_R.sav",
to.data.frame=TRUE)
table(diag.dat$ADFDX1)
# see Langa 2005 for further categorization
# normal=31
diag <- rep("none",nrow(diag.dat))
# demented
diag[diag.dat$ADFDX1 %in% c(1:8,10,13:19)] <- "dement"
# CIND
diag[diag.dat$ADFDX1 %in% c(20:22,28,29:30,23,24,25,26,27)] <- "cind"
table(diag)
######### get hrs id ##############
ab.dat <- read.spss("C:/Users/RJacobucci/Dropbox/dissertation/adams1waveasav/ADAMS1AB_R.sav",
to.data.frame=TRUE)
ab.dat <- read.spss("C:/Users/Ross/Dropbox/dissertation/adams1waveasav/ADAMS1AB_R.sav",
to.data.frame=TRUE)
ids <- cbind(ab.dat[,1:3],diag)
########### IADL/ADL ##################3
# has more missing data
ag.dat <- read.spss("C:/Users/RJacobucci/Dropbox/dissertation/adams1waveasav/ADAMS1AG_R.sav",
to.data.frame=TRUE)
ag.dat <- read.spss("C:/Users/Ross/Dropbox/dissertation/adams1waveasav/ADAMS1AG_R.sav",
to.data.frame=TRUE)
iadl <- ag.dat[,c("HHID","PN","AGQ30B","AGQ30C","AGQ30D","AGQ30F")]
iadl[,3] <- factor(iadl[,3])
iadl[,4] <- factor(iadl[,4])
iadl[,5] <- factor(iadl[,5])
iadl[,6] <- factor(iadl[,6])
adams.dat <- merge(ids,iadl)
#### adams cognitive measures ########
ad.dat <- read.spss("C:/Users/RJacobucci/Dropbox/dissertation/adams1waveasav/ADAMS1AD_R.sav",
to.data.frame=TRUE)
ad.dat <- read.spss("C:/Users/Ross/Dropbox/dissertation/adams1waveasav/ADAMS1AD_R.sav",
to.data.frame=TRUE)
cog.adams <- ad.dat[,c("HHID","PN","ADBLSCOR")]
an.dat <- read.spss("C:/Users/RJacobucci/Dropbox/dissertation/adams1waveasav/ADAMS1AN_R.sav",
to.data.frame=TRUE)
an.dat <- read.spss("C:/Users/Ross/Dropbox/dissertation/adams1waveasav/ADAMS1AN_R.sav",
to.data.frame=TRUE)
cog.adams2 <- an.dat[,c("HHID","PN","ANAFTOT","ANDSTOT")]
########## combine adams ##################3
adams1 <- merge(cog.adams,cog.adams2)
adams2 <- merge(adams1,iadl) # iadl is missing observations
adams3 <- merge(adams2,adams.dat)
#############################################################
############ HRS Dataset #############################
#########################################################333
#### HRS 2002 is Wave 6, 2000 is Wave 5
####### need weight ###########333333
library(foreign)
dat <- read.spss("/Users/RJacobucci/Documents/hrs_longitudinal/rndhrs_o.sav",
to.data.frame=TRUE)
dat <- read.spss("/Users/Ross/Documents/rndhrs_o.sav",
to.data.frame=TRUE)
dat2 <- dat[,c("HHID","PN","RAEDYRS","RARACEM","RAHISPAN","RAGENDER","R5TR20","R6TR20","R6PROXY",
"R5MSTOT","R6MSTOT","R5COGTOT","R6COGTOT","R5SHLT","R6SHLT","R5SER7","R6SER7")]
# "RAWTSAMP")]
match.ids <- merge(adams3,dat2)
match.ids2 <- match.ids[,-which(names(match.ids) %in% c("HHID","PN","ADAMSSID"))]
ids <- match.ids2$R6PROXY=="0.not proxy"
match.ids3 <- match.ids2[ids,]
library(mice)
out2 = mice(match.ids3,m=1,defaultMethod=c("cart","cart","cart"))
str(match.ids5)
match.ids4 = complete(out2)
str(match.ids4)
library(dtree)
?dtree
out.dtree <- dtree(diag ~ ., match.ids4,methods=c("lm","rpart","ctreePrune"))
summary(match.ids4)
str(match.ids4)
levels(match.ids4$diag)
out.dtree <- dtree(diag ~ ., match.ids4,methods=c("lm","rpart","ctreePrune"))
out.dtree <- dtree(diag ~ ., match.ids4,methods=c("rpart","ctreePrune"))
summary(out.dtree)
out.dtree <- dtree(diag ~ ., match.ids4,methods=c("lm","rpart","ctreePrune"))
out.dtree <- dtree(diag ~ ., match.ids4,methods=c("rpart","ctreePrune"),samp.method="cv")
out.dtree <- dtree(diag ~ ., match.ids4,methods=c("lm","rpart","ctreePrune"),samp.method="cv")
out.dtree <- dtree(diag ~ ., match.ids4,methods=c("lm","rpart","ctreePrune"),samp.method="cv")
match.ids4$diag
mod <- multinom(diag ~ ., match.ids4)
library(nnet)
mod <- multinom(diag ~ ., match.ids4)
summary(mod)
out.dtree <- dtree(diag ~ ., match.ids4,methods=c("rpart","ctreePrune","ctree","rf"))
out.dtree <- dtree(diag ~ ., match.ids4,methods=c("lm","rpart","ctreePrune","ctree",))
out.dtree <- dtree(diag ~ ., match.ids4,methods=c("lm","rpart","ctreePrune","ctree"))
summary(out.dtree)
str(out.dtree)
out.dtree$rpart.out
out.dtree$rpart.train
table(match.ids4$diag)
match.ids4$diag
summary(match.ids4)
describe(match.ids4)
library(psych)
describe(match.ids4)
?describe
describe(match.ids4$diag)
out.dtree <- dtree(diag ~ ., match.ids4,methods=c("lm","rpart","ctreePrune","ctree","rf"))
out.dtree <- dtree(diag ~ ., match.ids4,methods=c("lm","rpart","ctreePrune","ctree","rf"))
out.rf <- randomForest(diag ~., match.ids4)
is.na(match.ids4$diag)
levels(match.ids4$diag)
match.ids4$diag
match.ids4$diag == "cind"
match.ids4$diag == "cind" | match.ids4$diag == "none" | match.ids4$diag == "dement"
out.rf <- train(diag ~., match.ids4,method="rf")
?randomForest
out.rf <- train(diag ~., match.ids4,method="cforest")
?cforest
out.rf <- train(diag ~., match.ids4,method="ctree")
out.rf <- train(diag ~., match.ids4,method="rf",na.action=na.pass)
out.rf <- train(diag ~., match.ids4,method="cforest",na.action=na.pass)
out.rf
out.rf <- train(diag ~., match.ids4,method="parRF",na.action=na.pass)
out.rf <- train(diag ~., match.ids4,method="ranger",na.action=na.pass)
?ranger
out.dtree <- dtree(diag ~ ., match.ids4,methods=c("lm","rpart","ctreePrune","ctree","rf"),tuneLength=5)
summary(out.dtree)
save.image("out_dtree_hrs1.RData")
out.rf <- train(diag ~., match.ids4,method="'xgbLinear",na.action=na.pass)
out.rf <- train(diag ~., match.ids4,method="xgbLinear",na.action=na.pass)
out.rf
out.rf <- train(diag ~., match.ids4,method="cforest",na.action=na.pass)
out.rf
out.rf <- train(diag ~., match.ids4,method="dnn",na.action=na.pass)
out.rf <- train(diag ~., match.ids4,method="nnet",na.action=na.pass)
out.rf
out.rf <- train(diag ~., match.ids4,method="Boruta",na.action=na.pass)
sum(complete.cases(match.ids4))
complete.cases(match.ids4)
match.ids4[139,]
summary(match.ids4)
ids <- match.ids2$R6PROXY=="0.not proxy"
match.ids3 <- match.ids2[ids,]
match.ids2$R6PROXY=="0.not proxy"
ids <- match.ids2$R6PROXY=="0.not proxy" | is.na(match.ids2)
match.ids3 <- match.ids2[ids,]
ids <- match.ids2$R6PROXY=="0.not proxy" | is.na(match.ids2$R6PROXY)
match.ids3 <- match.ids2[ids,]
ids <- match.ids2$R6PROXY=="0.not proxy" | is.na(match.ids2$R6PROXY)==FALSE
match.ids3 <- match.ids2[ids,]
is.na(match.ids2$R6PROXY)==FALSE
ids <- match.ids2$R6PROXY=="0.not proxy" & is.na(match.ids2$R6PROXY)==FALSE
match.ids3 <- match.ids2[ids,]
library(mice)
out2 = mice(match.ids3,m=1,defaultMethod=c("cart","cart","cart"))
match.ids4 = complete(out2)
out.rf <- train(diag ~., match.ids4,method="Boruta",na.action=na.pass)
out.dtree <- dtree(diag ~ ., match.ids4,methods=c("lm","rpart","ctreePrune","ctree","rf"),tuneLength=5)
summary(out.dtree)
out.dtree <- dtree(diag ~ ., match.ids4,methods=c("lm","rpart","ctreePrune","ctree","rf"),tuneLength=7)
summary(out.dtree)
?train
out.rf <- train(diag ~., match.ids4,method="ranger",tuneLength=7,trControl=trainControl(method="repeatedcv"))
out.rf <- train(diag ~., match.ids4,method="parRF",tuneLength=7,trControl=trainControl(method="repeatedcv"))
out.rf
out.rf <- train(diag ~., match.ids4,method="parRF",tuneLength=7,trControl=trainControl(method="repeatedcv",repeats=10))
out.rf
?stable
out.stable <- stable(diag~., match.ids4,methods=c("rpart","ctreePrune","ctree"))
summary(out.stable)
out.stable
save.image("out_dtree_hrs2.RData")
