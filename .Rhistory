ret2
library(dtree)
ret2 <- stable(medv~., Boston,methods=c("ctree","ctreePrune","rpart"),n.rep=5,bump.rep=20,
samp.method="cv",tuneLength=2,stablelearner=FALSE,parallel=FALSE)
ret2
library(dtree)
ret2 <- stable(medv~., Boston,methods=c("ctree","ctreePrune","rpart"),n.rep=5,bump.rep=20,
samp.method="cv",tuneLength=2,stablelearner=FALSE,parallel=FALSE)
ret2
library(dtree)
?dtree
?sim_regDat
sim_regDat <- function(N,P,nonzero.num=NULL,beta.nonzero=NULL){
x=data.frame(matrix(rnorm(P*N),ncol=P))
if(is.null(nonzero.num)==TRUE){
beta <- rep(0,P)
}else{
beta <- c(beta.nonzero,rep(0,P-nonzero.num))
}
y <- as.matrix(x)%*%beta + rnorm(nrow(x),0,1)
return(data.frame(y,x))
}
?parLapply
samps <- c(100,500,2000)
npreds <- c(3,10,50)
samps <- c(100,500,2000)
npreds <- c(3,10,50)
grid <- expand.grid(samps=samps,npreds=npreds)
grid
par.fun <- function(vec){
library(dtree)
dat <- sim_regDat(vec[,"samps"],vec[,"npreds"])
dtree(y ~ .,dat,methods=c("rpart"),
samp.method="cv",tuneLength=3,bump.rep=50,subset,perc.sub,weights)$return.matrix[,"nodes"]
}
out <- list()
out <- parRapply(cl, grid,par.fun)
library(parallel)
out <- parRapply(cl, grid,par.fun)
no_cores <- detectCores() - 1
cl <- makeCluster(no_cores)
clusterExport(cl, c("sim_regDat","grid"))
par.fun <- function(vec){
library(dtree)
dat <- sim_regDat(vec[,"samps"],vec[,"npreds"])
dtree(y ~ .,dat,methods=c("rpart"),
samp.method="cv",tuneLength=3,bump.rep=50,subset,perc.sub,weights)$return.matrix[,"nodes"]
}
out <- list()
out <- parRapply(cl, grid,par.fun)
no_cores <- detectCores() - 1
cl <- makeCluster(no_cores)
clusterExport(cl, c("sim_regDat","grid"))
par.fun <- function(vec){
library(dtree)
dat <- sim_regDat(vec["samps"],vec["npreds"])
dtree(y ~ .,dat,methods=c("rpart"),
samp.method="cv",tuneLength=3,bump.rep=50,subset,perc.sub,weights)$return.matrix[,"nodes"]
}
out <- list()
out <- parRapply(cl, grid,par.fun)
no_cores <- detectCores() - 1
cl <- makeCluster(no_cores)
clusterExport(cl, c("sim_regDat","grid"))
par.fun <- function(vec){
library(dtree)
dat <- sim_regDat(vec["samps"],vec["npreds"])
dtree(y ~ .,dat,methods=c("rpart"),
samp.method="cv",tuneLength=3,bump.rep=50,
subset=FALSE,perc.sub=.75,weights=NULL)$return.matrix[,"nodes"]
}
out <- list()
out <- parRapply(cl, grid,par.fun)
out
no_cores <- detectCores() - 1
cl <- makeCluster(no_cores)
clusterExport(cl, c("sim_regDat","grid"))
par.fun <- function(vec){
library(dtree)
dat <- sim_regDat(vec["samps"],vec["npreds"])
dtree(y ~ .,dat,methods=c("rpart","ctree","ctreePrune"),
samp.method="cv",tuneLength=3,bump.rep=50,
subset=FALSE,perc.sub=.75,weights=NULL)$return.matrix[,"nodes"]
}
out <- list()
out <- parRapply(cl, grid,par.fun)
out
no_cores <- detectCores() - 1
cl <- makeCluster(no_cores)
clusterExport(cl, c("sim_regDat","grid"))
par.fun <- function(vec){
library(dtree)
dat <- sim_regDat(vec["samps"],vec["npreds"])
data.frame(dtree(y ~ .,dat,methods=c("rpart","ctree"),
samp.method="cv",tuneLength=3,bump.rep=50,
subset=FALSE,perc.sub=.75,weights=NULL)$return.matrix[,"nodes"],vec["samps"],vec["npreds"])
}
out <- list()
out <- parRapply(cl, grid,par.fun)
out
par.fun <- function(vec){
library(dtree)
dat <- sim_regDat(vec["samps"],vec["npreds"])
as.matrix(dtree(y ~ .,dat,methods=c("rpart","ctree"),
samp.method="cv",tuneLength=3,bump.rep=50,
subset=FALSE,perc.sub=.75,weights=NULL)$return.matrix[,"nodes"],vec["samps"],vec["npreds"])
}
out <- list()
out <- parRapply(cl, grid,par.fun)
out
no_cores <- detectCores() - 1
cl <- makeCluster(no_cores)
clusterExport(cl, c("sim_regDat","grid"))
par.fun <- function(vec){
library(dtree)
dat <- sim_regDat(vec["samps"],vec["npreds"])
out = data.frame(dtree(y ~ .,dat,methods=c("rpart","ctree"),
samp.method="cv",tuneLength=3,bump.rep=50,
subset=FALSE,perc.sub=.75,weights=NULL)$return.matrix[,"nodes"],vec["samps"],vec["npreds"])
colnames(out) = c(c("rpart","ctree"),"samps","npreds")
out
}
out <- parRapply(cl, grid,par.fun)
no_cores <- detectCores() - 1
cl <- makeCluster(no_cores)
clusterExport(cl, c("sim_regDat","grid"))
par.fun <- function(vec){
library(dtree)
dat <- sim_regDat(vec["samps"],vec["npreds"])
out = data.frame(dtree(y ~ .,dat,methods=c("rpart","ctree"),
samp.method="cv",tuneLength=3,bump.rep=50,
subset=FALSE,perc.sub=.75,weights=NULL)$return.matrix[,"nodes"],vec["samps"],vec["npreds"])
colnames(out) = c("method","samps","npreds")
out
}
out <- list()
out <- parRapply(cl, grid,par.fun)
out
par.fun <- function(vec){
library(dtree)
dat <- sim_regDat(vec["samps"],vec["npreds"])
out = t(data.frame(dtree(y ~ .,dat,methods=c("rpart","ctree"),
samp.method="cv",tuneLength=3,bump.rep=50,
subset=FALSE,perc.sub=.75,weights=NULL)$return.matrix[,"nodes"]))
out2 <- data.frame(out,vec["samps"],vec["npreds"])
colnames(out2) = c(c("rpart","ctree"),"samps","npreds")
out2
}
out <- list()
out <- parRapply(cl, grid,par.fun)
out
no_cores <- detectCores() - 1
cl <- makeCluster(no_cores)
clusterExport(cl, c("sim_regDat","grid"))
par.fun <- function(vec){
library(dtree)
dat <- sim_regDat(vec["samps"],vec["npreds"])
out = t(data.frame(dtree(y ~ .,dat,methods=c("rpart","ctree"),
samp.method="cv",tuneLength=3,bump.rep=50,
subset=FALSE,perc.sub=.75,weights=NULL)$return.matrix[,"nodes"]))
out2 <- data.frame(out,vec["samps"],vec["npreds"])
colnames(out2) = c(c("rpart","ctree"),"samps","npreds")
rownames(out2) <- NULL
out2
}
out <- list()
out <- parRapply(cl, grid,par.fun)
out
out <- parCapply(cl, grid,par.fun)
no_cores <- detectCores() - 1
cl <- makeCluster(no_cores)
clusterExport(cl, c("sim_regDat","grid"))
par.fun <- function(vec){
library(dtree)
dat <- sim_regDat(vec["samps"],vec["npreds"])
out = t(data.frame(dtree(y ~ .,dat,methods=c("rpart","ctree"),
samp.method="cv",tuneLength=3,bump.rep=50,
subset=FALSE,perc.sub=.75,weights=NULL)$return.matrix[,"nodes"]))
out2 <- data.frame(out,vec["samps"],vec["npreds"])
colnames(out2) = c(c("rpart","ctree"),"samps","npreds")
rownames(out2) <- NULL
out2
}
out <- list()
out <- parCapply(cl, grid,par.fun)
no_cores <- detectCores() - 1
cl <- makeCluster(no_cores)
clusterExport(cl, c("sim_regDat","grid"))
par.fun <- function(vec){
library(dtree)
dat <- sim_regDat(vec["samps"],vec["npreds"])
out = t(data.frame(dtree(y ~ .,dat,methods=c("rpart","ctree","ctreePrune","evtree","bump"),
samp.method="cv",tuneLength=3,bump.rep=50,
subset=FALSE,perc.sub=.75,weights=NULL)$return.matrix[,"nodes"]))
out2 <- data.frame(out,vec["samps"],vec["npreds"])
colnames(out2) = c(c("rpart","ctree","ctreePrune","evtree","bump"),"samps","npreds")
rownames(out2) <- NULL
out2
}
out <- parRapply(cl, grid,par.fun)
no_cores <- detectCores() - 1
cl <- makeCluster(no_cores)
clusterExport(cl, c("sim_regDat","grid"))
par.fun <- function(vec){
library(dtree)
dat <- sim_regDat(vec["samps"],vec["npreds"])
out = t(data.frame(dtree(y ~ .,dat,methods=c("rpart","ctree","ctreePrune","evtree","bump"),
samp.method="cv",tuneLength=3,bump.rep=50,
subset=FALSE,perc.sub=.75,weights=NULL)$return.matrix[,"nodes"]))
out2 <- data.frame(out,vec["samps"],vec["npreds"])
colnames(out2) = c(c("rpart","ctree","ctreePrune","evtree","bump"),"samps","npreds")
rownames(out2) <- NULL
out2
}
system.time(out <- parRapply(cl, grid,par.fun))
dat <- sim_regDat(200,100)
head(dat)
round(dat[,2:ncol(dat)],0)
no_cores <- detectCores() - 1
cl <- makeCluster(no_cores)
clusterExport(cl, c("sim_regDat","grid"))
par.fun <- function(vec){
library(dtree)
dat <- sim_regDat(vec["samps"],vec["npreds"])
dat2 <- round(dat[,2:ncol(dat)],0)
out = t(data.frame(dtree(y ~ .,dat2,methods=c("rpart","ctree","ctreePrune","evtree","bump"),
samp.method="cv",tuneLength=3,bump.rep=50,
subset=FALSE,perc.sub=.75,weights=NULL)$return.matrix[,"nodes"]))
out2 <- data.frame(out,vec["samps"],vec["npreds"])
colnames(out2) = c(c("rpart","ctree","ctreePrune","evtree","bump"),"samps","npreds")
rownames(out2) <- NULL
out2
}
system.time(out <- parRapply(cl, grid,par.fun))
dat2 <- round(dat[,2:ncol(dat)],0)
dat3 <- data.frame(y=dat$y,dat2)
head(dat3)
no_cores <- detectCores() - 1
cl <- makeCluster(no_cores)
clusterExport(cl, c("sim_regDat","grid"))
par.fun <- function(vec){
library(dtree)
dat <- sim_regDat(vec["samps"],vec["npreds"])
dat2 <- round(dat[,2:ncol(dat)],0)
dat3 <- data.frame(y=dat$y,dat2)
out = t(data.frame(dtree(y ~ .,dat3,methods=c("rpart","ctree","ctreePrune","evtree","bump"),
samp.method="cv",tuneLength=3,bump.rep=50,
subset=FALSE,perc.sub=.75,weights=NULL)$return.matrix[,"nodes"]))
out2 <- data.frame(out,vec["samps"],vec["npreds"])
colnames(out2) = c(c("rpart","ctree","ctreePrune","evtree","bump"),"samps","npreds")
rownames(out2) <- NULL
out2
}
system.time(out <- parRapply(cl, grid,par.fun))
out
no_cores <- detectCores() - 1
cl <- makeCluster(no_cores)
clusterExport(cl, c("sim_regDat","grid"))
par.fun <- function(vec){
library(dtree)
dat <- sim_regDat(vec["samps"],vec["npreds"])
dat2 <- round(dat[,2:ncol(dat)],0)
dat3 <- data.frame(y=dat$y,dat2)
out = t(data.frame(dtree(y ~ .,dat3,methods=c("rpart","ctree"),
samp.method="cv",tuneLength=3,bump.rep=50,
subset=FALSE,perc.sub=.75,weights=NULL)$return.matrix[,"nodes"]))
out2 <- data.frame(out,vec["samps"],vec["npreds"])
colnames(out2) = c(c("rpart","ctree"),"samps","npreds")
rownames(out2) <- NULL
out2
}
system.time(out <- parRapply(cl, grid,par.fun))
out
no_cores <- detectCores() - 1
cl <- makeCluster(no_cores)
clusterExport(cl, c("sim_regDat","grid"))
par.fun <- function(vec){
library(dtree)
dat <- sim_regDat(vec["samps"],vec["npreds"])
dat2 <- round(dat[,2:ncol(dat)],0)
dat3 <- data.frame(y=dat$y,dat2)
out = t(data.frame(dtree(y ~ .,dat3,methods=c("bump","evtree"),
samp.method="cv",tuneLength=3,bump.rep=50,
subset=FALSE,perc.sub=.75,weights=NULL)$return.matrix[,"nodes"]))
out2 <- data.frame(out,vec["samps"],vec["npreds"])
colnames(out2) = c(c("bump","evtree"),"samps","npreds")
rownames(out2) <- NULL
out2
}
system.time(out <- parRapply(cl, grid,par.fun))
yy <- list();tt <- list()
for(i in 1:3){
yy[[i]] <- dtree(medv~., Boston,methods=c("evtree","bump"),tuneLength=2,bump.rep=10)$return.matrix[,"nodes"]
}
library(MASS) # for boston data
data(Boston)
yy = dtree(medv~., Boston[1:100,],methods=c("ctree","rpart"),tuneLength=2,bump.rep=10)$return.matrix[,"nodes"]
library(dtree)
yy = dtree(medv~., Boston[1:100,],methods=c("ctree","rpart"),tuneLength=2,bump.rep=10)$return.matrix[,"nodes"]
yy = dtree(medv~., Boston[1:100,],methods=c("bump","evtree"),tuneLength=2,bump.rep=10)$return.matrix[,"nodes"]
yy
sim_regDat <- function(N,P,nonzero.num=NULL,beta.nonzero=NULL){
x=data.frame(matrix(rnorm(P*N),ncol=P))
if(is.null(nonzero.num)==TRUE){
beta <- rep(0,P)
}else{
beta <- c(beta.nonzero,rep(0,P-nonzero.num))
}
y <- as.matrix(x)%*%beta + rnorm(nrow(x),0,1)
return(data.frame(y,x))
}
library(parallel)
niter <- 100
samps <- c(100,500,2000)
npreds <- c(3,10,50)
grid <- expand.grid(samps=samps,npreds=npreds)
par.fun <- function(vec){
library(dtree)
dat <- sim_regDat(vec["samps"],vec["npreds"])
dat2 <- round(dat[,2:ncol(dat)],0)
dat3 <- data.frame(y=dat$y,dat2)
out = t(data.frame(dtree(y ~ .,dat3,methods=c("bump","evtree"),
samp.method="cv",tuneLength=1,bump.rep=1,
subset=FALSE,perc.sub=.75,weights=NULL)$return.matrix[,"nodes"]))
out2 <- data.frame(out,vec["samps"],vec["npreds"])
colnames(out2) = c(c("bump","evtree"),"samps","npreds")
rownames(out2) <- NULL
out2
}
out <- parRapply(cl, grid,par.fun)
no_cores <- detectCores() - 1
cl <- makeCluster(no_cores)
clusterExport(cl, c("sim_regDat","grid"))
par.fun <- function(vec){
library(dtree)
dat <- sim_regDat(vec["samps"],vec["npreds"])
dat2 <- round(dat[,2:ncol(dat)],0)
dat3 <- data.frame(y=dat$y,dat2)
out = t(data.frame(dtree(y ~ .,dat3,methods=c("bump","evtree"),
samp.method="cv",tuneLength=1,bump.rep=1,
subset=FALSE,perc.sub=.75,weights=NULL)$return.matrix[,"nodes"]))
out2 <- data.frame(out,vec["samps"],vec["npreds"])
colnames(out2) = c(c("bump","evtree"),"samps","npreds")
rownames(out2) <- NULL
out2
}
out <- parRapply(cl, grid,par.fun)
out
par.fun <- function(vec){
library(dtree)
dat <- sim_regDat(vec["samps"],vec["npreds"])
dat2 <- round(dat[,2:ncol(dat)],0)
dat3 <- data.frame(y=dat$y,dat2)
out = t(data.frame(dtree(y ~ .,dat3,methods=c("bump"),
samp.method="cv",tuneLength=1,bump.rep=5,
subset=FALSE,perc.sub=.75,weights=NULL)$return.matrix[,"nodes"]))
out2 <- data.frame(out,vec["samps"],vec["npreds"])
colnames(out2) = c(c("bump"),"samps","npreds")
rownames(out2) <- NULL
out2
}
out <- parRapply(cl, grid,par.fun)
dtree(medv~., Boston[1:100,],methods=c("bump"),tuneLength=2,bump.rep=10)$return.matrix
no_cores <- detectCores() - 1
cl <- makeCluster(no_cores)
clusterExport(cl, c("sim_regDat","grid"))
par.fun <- function(vec){
library(dtree)
dat <- sim_regDat(vec["samps"],vec["npreds"])
dat2 <- round(dat[,2:ncol(dat)],0)
dat3 <- data.frame(y=dat$y,dat2)
out = t(data.frame(dtree(y ~ .,dat3,methods=c("bump"),
samp.method="cv",tuneLength=1,bump.rep=5,
subset=FALSE,perc.sub=.75,weights=NULL)$return.matrix[,"nodes"]))
out2 <- data.frame(out,vec["samps"],vec["npreds"])
colnames(out2) = c(c("bump"),"samps","npreds")
rownames(out2) <- NULL
out2
}
out <- parRapply(cl, grid,par.fun)
par.fun <- function(vec){
library(dtree)
dat <- sim_regDat(vec["samps"],vec["npreds"])
dat2 <- round(dat[,2:ncol(dat)],0)
dat3 <- data.frame(y=dat$y,dat2)
out = t(data.frame(dtree(y ~ .,dat3,methods=c("bump"),
samp.method="cv",tuneLength=1,bump.rep=5,
subset=FALSE,perc.sub=.75,weights=NULL)$return.matrix))
#out2 <- data.frame(out,vec["samps"],vec["npreds"])
#colnames(out2) = c(c("bump"),"samps","npreds")
#rownames(out2) <- NULL
out
}
out <- parRapply(cl, grid,par.fun)
dat <- sim_regDat(200,10)
dat2 <- round(dat[,2:ncol(dat)],0)
dat3 <- data.frame(y=dat$y,dat2)
out = t(data.frame(dtree(y ~ .,dat3,methods=c("bump"),
samp.method="cv",tuneLength=1,bump.rep=5,
subset=FALSE,perc.sub=.75,weights=NULL)$return.matrix))
out
dat <- sim_regDat(200,10)
dat2 <- round(dat[,2:ncol(dat)],0)
dat3 <- data.frame(y=dat$y,dat2)
out = t(data.frame(dtree(y ~ .,dat3,methods=c("bump"),
samp.method="cv",tuneLength=1,bump.rep=5,
subset=FALSE,perc.sub=.75,weights=NULL)$return.matrix[,"nodes"]))
dat <- sim_regDat(200,10)
dat2 <- round(dat[,2:ncol(dat)],0)
dat3 <- data.frame(y=dat$y,dat2)
out = data.frame(dtree(y ~ .,dat3,methods=c("bump"),
samp.method="cv",tuneLength=1,bump.rep=5,
subset=FALSE,perc.sub=.75,weights=NULL)$return.matrix[,"nodes"])
dat <- sim_regDat(200,10)
dat2 <- round(dat[,2:ncol(dat)],0)
dat3 <- data.frame(y=dat$y,dat2)
out = data.frame(dtree(y ~ .,dat3,methods=c("bump"),
samp.method="cv",tuneLength=1,bump.rep=5,
subset=FALSE,perc.sub=.75,weights=NULL)$return.matrix)
dat <- sim_regDat(200,10)
dat2 <- round(dat[,2:ncol(dat)],0)
dat3 <- data.frame(y=dat$y,dat2)
out = dtree(y ~ .,dat3,methods=c("bump"),
samp.method="cv",tuneLength=1,bump.rep=5,
subset=FALSE,perc.sub=.75,weights=NULL)$return.matrix
dat <- sim_regDat(200,10)
dat2 <- round(dat[,2:ncol(dat)],0)
dat3 <- data.frame(y=dat$y,dat2)
head(dat3)
out = dtree(y ~ .,dat3,methods=c("bump"),samp.method="cv",tuneLength=1,bump.rep=5,subset=FALSE,perc.sub=.75,weights=NULL)
traceback()
library(dtree)
out = dtree(y ~ .,dat3,methods=c("bump"),samp.method="cv",tuneLength=1,bump.rep=5,subset=FALSE,perc.sub=.75,weights=NULL)
library(dtree)
out = dtree(y ~ .,dat3,methods=c("bump"),samp.method="cv",tuneLength=1,bump.rep=5,subset=FALSE,perc.sub=.75,weights=NULL)
out
traceback()
library(dtree)
out = dtree(y ~ .,dat3,methods=c("bump"),samp.method="cv",tuneLength=1,bump.rep=5,subset=FALSE,perc.sub=.75,weights=NULL)
out
no_cores <- detectCores() - 1
cl <- makeCluster(no_cores)
clusterExport(cl, c("sim_regDat","grid"))
par.fun <- function(vec){
library(dtree)
dat <- sim_regDat(vec["samps"],vec["npreds"])
dat2 <- round(dat[,2:ncol(dat)],0)
dat3 <- data.frame(y=dat$y,dat2)
out = t(data.frame(dtree(y ~ .,dat3,methods=c("rpart","ctree","ctreePrune","evtree","bump"),
samp.method="cv",tuneLength=3,bump.rep=50,
subset=FALSE,perc.sub=.75,weights=NULL)$return.matrix[,"nodes"]))
out2 <- data.frame(out,vec["samps"],vec["npreds"])
colnames(out2) = c(c("rpart","ctree","ctreePrune","evtree","bump"),"samps","npreds")
rownames(out2) <- NULL
out2
}
system.time(out <- parRapply(cl, grid,par.fun))
dat <- sim_regDat(100,10)
dat2 <- round(dat[,2:ncol(dat)],0)
dat3 <- data.frame(y=dat$y,dat2)
out = t(data.frame(dtree(y ~ .,dat3,methods=c("rpart","ctree","ctreePrune","evtree","bump"),
samp.method="cv",tuneLength=3,bump.rep=50,
subset=FALSE,perc.sub=.75,weights=NULL)$return.matrix[,"nodes"]))
traceback()
library(dtree)
library(dtree)
dat <- sim_regDat(100,10)
dat2 <- round(dat[,2:ncol(dat)],0)
dat3 <- data.frame(y=dat$y,dat2)
out = t(data.frame(dtree(y ~ .,dat3,methods=c("bump"),
samp.method="cv",tuneLength=3,bump.rep=50,
subset=FALSE,perc.sub=.75,weights=NULL)$return.matrix[,"nodes"]))
library(dtree)
dat <- sim_regDat(100,10)
dat2 <- round(dat[,2:ncol(dat)],0)
dat3 <- data.frame(y=dat$y,dat2)
out = t(data.frame(dtree(y ~ .,dat3,methods=c("bump"),
samp.method="cv",tuneLength=3,bump.rep=50,
subset=FALSE,perc.sub=.75,weights=NULL)$return.matrix[,"nodes"]))
no_cores <- detectCores() - 1
cl <- makeCluster(no_cores)
clusterExport(cl, c("sim_regDat","grid"))
par.fun <- function(vec){
library(dtree)
dat <- sim_regDat(vec["samps"],vec["npreds"])
dat2 <- round(dat[,2:ncol(dat)],0)
dat3 <- data.frame(y=dat$y,dat2)
out = t(data.frame(dtree(y ~ .,dat3,methods=c("rpart","ctree","ctreePrune","evtree","bump"),
samp.method="cv",tuneLength=3,bump.rep=50,
subset=FALSE,perc.sub=.75,weights=NULL)$return.matrix[,"nodes"]))
out2 <- data.frame(out,vec["samps"],vec["npreds"])
colnames(out2) = c(c("rpart","ctree","ctreePrune","evtree","bump"),"samps","npreds")
rownames(out2) <- NULL
out2
}
system.time(out <- parRapply(cl, grid,par.fun))
out
dat <- sim_regDat(200,10)
dat2 <- round(dat[,2:ncol(dat)],0)
dat3 <- data.frame(y=dat$y,dat2)
dat <- sim_regDat(200,10)
dat2 <- round(dat[,2:ncol(dat)],0)
dat3 <- data.frame(y=dat$y,dat2)
out = t(data.frame(dtree(y ~ .,dat3,methods=c("evtree"),
samp.method="cv",tuneLength=3,bump.rep=50,
subset=FALSE,perc.sub=.75,weights=NULL)$return.matrix[,"nodes"]))
out
out = dtree(y ~ .,dat3,methods=c("evtree"),
samp.method="cv",tuneLength=3,bump.rep=50,
subset=FALSE,perc.sub=.75,weights=NULL)
out
library(dtree)
