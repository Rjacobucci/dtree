install.packages("stablelearner", repos="http://R-Forge.R-project.org")
library(dtree)
install.packages("tree")
install.packages("ISLR")
library(dtree)
library(dtree)
library(MASS) # for boston data
data(Boston)
out <- dtree(medv ~., data=Boston,methods=c("rpart"))
ctrl <- trainControl(method="repeatedcv")
data.train=Boston
fomula=medv~.
ctrl <- trainControl(method="repeatedcv")
train.out <- train(formula,data.train,method="rpart",tuneLength=1,
trControl=ctrl)
ctrl <- trainControl(method="repeatedcv")
train.out <- train(formula,data.train,method="rpart",tuneLength=2,
trControl=ctrl)
library(caret)
ctrl <- trainControl(method="repeatedcv")
train.out <- train(formula,data.train,method="rpart",tuneLength=2,
trControl=ctrl)
Boston
formula
formula=medv~.
train.out <- train(formula,data.train,method="rpart",tuneLength=2,
trControl=ctrl)
train.out$finalModel
rpart.out <- train.out$finalModel
rpart.out$cptable
min.error <- which(min(cp[,"rel error"]) == cp[,"rel error"])[1]
cp <- rpart.out$cptable
which(min(cp[,"rel error"]) == cp[,"rel error"])[1]
cp[min.error,"nsplit"]
min.error <- which(min(cp[,"rel error"]) == cp[,"rel error"])[1]
cp[min.error,"nsplit"]
rpart.ret <- train.out
rpart.ret$frame[,"var"]
rpart.ret <- rpart.out
vars <- rpart.ret$frame[,"var"]
vars2 <- vars[vars != "<leaf>"]
length(unique(vars2))
length(vars[vars == "<leaf>"])
cp[min.error,"xerror"]
train.out
str(train.out)
?train
train.out$results
train.out$finalModel$results
train.out$metric
train.out$bestTune
train.out$perfNames
str(train.out$finalModel)
train.out$results
train.out$results[,"cp"] == train.out$bestTune
train.out$bestTune
where(train.out$results[,"cp"] == train.out$bestTune)
which(train.out$results[,"cp"] == train.out$bestTune)
ind <- which(train.out$results[,"cp"] == train.out$bestTune)
train.out$results[ind,"RMSE"]
train.out$results
library(dtree)
(stab.out <- stability(medv ~., data=Boston,methods=c("rpart","ctree")))
warnings()
library(dtree)
out <- dtree(medv ~., data=Boston,methods=c("rpart"))
traceback()
library(dtree)
out <- dtree(medv ~., data=Boston,methods=c("rpart"))
library(dtree)
summary(out)
library(dtree)
library(dtree)
(stab.out <- stability(medv ~., data=Boston,methods=c("rpart")))
library(dtree)
(stab.out <- stability(medv ~., data=Boston,methods=c("rpart")))
(stab.out <- stability(medv ~., data=Boston,methods=c("rpart"),samp.method="cv"))
(stab.out <- stability(medv ~., data=Boston,methods=c("rpart"),samp.method="none"))
(stab.out <- stability(medv ~., data=Boston,methods=c("rpart"),samp.method="none",tuneLength=1))
out <- dtree(medv ~., data=Boston,methods=c("rpart"),tuneLength=1)
out
out <- dtree(medv ~., data=Boston,methods=c("rpart"),tuneLength=1,samp.method="none")
traceback()
samp.method="none"
tuneLength=1
ctrl <- trainControl(method=samp.method)
train.out <- train(formula,data.train,method="rpart",tuneLength=tuneLength,
trControl=ctrl)
train.out$finalModel
which(min(cp[,"rel error"]) == cp[,"rel error"])[1]
rpart.out$cptable
cp[min.error,"nsplit"]
train.out$varImp
rpart.ret$frame[,"var"]
length(unique(vars2))
return.matrix <- matrix(NA,1,7)
colnames(return.matrix) <- c("nodes","nvar","nsplits","rmse.samp",
"rsq.samp","rmse.test","rsq.test")
rpart.ret <- rpart.out
vars <- rpart.ret$frame[,"var"]
vars2 <- vars[vars != "<leaf>"]
return.matrix[1,"nvar"] <- length(unique(vars2))
return.matrix[1,"nodes"] <- length(vars[vars == "<leaf>"])
ind <- which(train.out$results[,"cp"] == train.out$bestTune)
train.out$results[,"cp"]
train.out$results
train.out$results
train.out
str(train.out)
train.out
out <- dtree(medv ~., data=Boston,methods=c("rpart"),tuneLength=1,samp.method="cv")
out
library(dtree)
out <- dtree(medv ~., data=Boston,methods=c("rpart"),tuneLength=10,samp.method="cv")
tuneLength=10
samp.method="cv"
return.matrix <- matrix(NA,1,7)
colnames(return.matrix) <- c("nodes","nvar","nsplits","rmse.samp",
"rsq.samp","rmse.test","rsq.test")
}else{
return.matrix <- matrix(NA,1,7)
colnames(return.matrix) <- c("nodes","nvar","nsplits","rmse.samp",
"rsq.samp","rmse.test","rsq.test")
ctrl <- trainControl(method=samp.method)
train.out <- train(formula,data.train,method="rpart",tuneLength=tuneLength,
trControl=ctrl)
rpart.out <- train.out$finalModel
cp <- rpart.out$cptable
min.error <- which(min(cp[,"rel error"]) == cp[,"rel error"])[1]
return.matrix[1,"nsplits"] <- cp[min.error,"nsplit"]
#train.out$varImp
rpart.ret <- rpart.out
vars <- rpart.ret$frame[,"var"]
vars2 <- vars[vars != "<leaf>"]
return.matrix[1,"nvar"] <- length(unique(vars2))
return.matrix[1,"nodes"] <- length(vars[vars == "<leaf>"])
ind <- which(train.out$results[,"cp"] == train.out$bestTune)
train.out$results[ind,"RMSE"]
library(dtree)
library(MASS) # for boston data
data(Boston)
out <- dtree(medv ~., data=Boston,methods=c("rpart"),tuneLength=10,samp.method="cv")
traceback()
library(dtree)
library(MASS) # for boston data
data(Boston)
out <- dtree(medv ~., data=Boston,methods=c("rpart"),tuneLength=10,samp.method="cv")
library(MASS) # for boston data
data(Boston)
out <- dtree(medv ~., data=Boston,methods=c("rpart"),tuneLength=10,samp.method="cv")
library(dtree)
library(dtree)
library(MASS) # for boston data
data(Boston)
out <- dtree(medv ~., data=Boston,methods=c("rpart"),tuneLength=10,samp.method="cv")
library(dtree)
library(MASS) # for boston data
data(Boston)
out <- dtree(medv ~., data=Boston,methods=c("rpart"),tuneLength=10,samp.method="cv")
library(dtree)
library(MASS) # for boston data
data(Boston)
out <- dtree(medv ~., data=Boston,methods=c("rpart"),tuneLength=10,samp.method="cv")
train.out$bestTune
ctrl <- trainControl(method=samp.method)
train.out <- train(formula,data.train,method="rpart",tuneLength=tuneLength,
trControl=ctrl)
data.train=Boston
formula=medv~.
samp.method="cv"
tuneLength=10
ctrl <- trainControl(method=samp.method)
train.out <- train(formula,data.train,method="rpart",tuneLength=tuneLength,
trControl=ctrl)
which(train.out$results[,"cp"] == train.out$bestTune)
train.out$results[,"cp"]
train.out$bestTune
rain.out$results[,"cp"] == train.out$bestTune
train.out$results[,"cp"] == train.out$bestTune
row.names(train.out$bestTune)
ind <- as.numeric(row.names(train.out$bestTune)#which(train.out$results[,"cp"] == train.out$bestTune)
return.matrix[1,"rmse.samp"] <- train.out$results[ind,"RMSE"]
#return.matrix[1,"misfit.train"] <- mean((data.train[,response] - predict(rpart.out))^2)/nrow(data.train)
return.matrix[1,"rsq.samp"] <- train.out$results[ind,"Rsquared"]
if(subset==FALSE){
return.matrix[1,"rmse.test"] <- NA
return.matrix[1,"rsq.test"] <- NA
}else{
return.matrix[1,"rmse.test"] <- mean((data.test[,response] -
predict(rpart.out,data.test))^2)/nrow(data.test)
return.matrix[1,"rsq.test"] <- (cor(data.test[,response],predict(rpart.out,data.test)))**2
}
}else{
return.matrix[1,"accuracy.samp"] <- train.out$results[ind,"Accuracy"]
#return.matrix[1,"accuracy.train"] <- mean(round(predict(rpart.out)[,2])+1 == as.numeric(data.train[,response]))
return.matrix[1,"accuracy.test"] <- mean(round(predict(rpart.out,data.test)[,2])+1 == as.numeric(data.test[,response]))
}
ret$vec <- return.matrix
ret$rpart.ret <- rpart.ret
ret$rpart.train <- train.out
return(ret)
}
ind <- as.numeric(row.names(train.out$bestTune)) #which(train.out$results[,"cp"] == train.out$bestTune)
ind
library(dtree)
library(dtree)
library(MASS) # for boston data
data(Boston)
out <- dtree(medv ~., data=Boston,methods=c("rpart"),tuneLength=10,samp.method="cv")
out
(stab.out <- stability(medv ~., data=Boston,methods=c("rpart"),samp.method="none",tuneLength=1))
(stab.out <- stability(medv ~., data=Boston,methods=c("rpart"),samp.method="cv",tuneLength=1))
(stab.out <- stability(medv ~., data=Boston,methods=c("rpart"),samp.method="boot",tuneLength=1))
(stab.out <- stability(medv ~., data=Boston,methods=c("rpart"),samp.method="repeatedcv",tuneLength=1))
(stab.out <- stability(medv ~., data=Boston,methods=c("rpart"),samp.method="repeatedcv",tuneLength=5))
(stab.out <- stability(medv ~., data=Boston,methods=c("rpart"),samp.method="boot",tuneLength=5))
(stab.out <- stability(medv ~., data=Boston,methods=c("rpart"),samp.method="cv",tuneLength=5))
?tuneControl
?trainControl
(stab.out <- stability(medv ~., data=Boston,methods=c("rpart"),samp.method="adaptive_cv",tuneLength=5))
library(dtree)
(stab.out <- stability(medv ~., data=Boston,methods=c("rpart"),samp.method="cv",tuneLength=5))
(stab.out <- stability(medv ~., data=Boston,methods=c("rpart"),samp.method="repeatedcv",tuneLength=5))
(stab.out <- stability(medv ~., data=Boston,methods=c("rpart"),samp.method="boot",tuneLength=5))
library(dtree)
(stab.out <- stability(medv ~., data=Boston,methods=c("rpart"),samp.method="boot",tuneLength=5))
(stab.out <- stability(medv ~., data=Boston,methods=c("rpart"),stablelearner=TRUE,samp.method="boot",tuneLength=5))
library(dtree)
(stab.out <- stability(medv ~., data=Boston,methods=c("rpart"),stablelearner=TRUE,samp.method="boot",tuneLength=5))
out <- dtree(medv ~., data=Boston,methods=c("rpart"),tuneLength=10,samp.method="cv")
library(stablelearner)
stabletree(out$rpart.out)
stabletree(out$rpart.train)
library(dtree)
(stab.out <- stability(medv ~., data=Boston,methods=c("rpart"),stablelearner=TRUE,samp.method="boot",tuneLength=5))
out$rpart.out
tree <- dtree(formula,data,methods,samp.method,
tuneLength,subset,perc.sub,prune,weights)$rpart.out
subset=FALSE
tree <- dtree(formula,data,methods,samp.method,
tuneLength,subset,perc.sub,prune,weights)$rpart.out
formula
data
data=Boston
tree <- dtree(formula,data,methods,samp.method,
tuneLength,subset,perc.sub,prune,weights)$rpart.out
tuneLength
subset
perc.sub
perc.sub=.5
prune
prune=FALSE
weights
tree <- dtree(formula,data,methods,samp.method,
tuneLength,subset,perc.sub,weights)$rpart.out
formula
data
methods
methods="rpart"
samp.method
tree <- dtree(formula,data,methods,samp.method,
tuneLength,subset,perc.sub,weights)$rpart.out
out <- stablelearner::stabletree(tree)
library(dtree)
(stab.out <- stability(medv ~., data=Boston,methods=c("rpart"),stablelearner=TRUE,samp.method="boot",tuneLength=5))
stablelearner=FALSE
if(stablelearner==FALSE){
for(i in 1:n.rep){
set.seed(i)
ids <- sample(nrow(data),nrow(data),replace=TRUE)
out[[i]] <- dtree(formula,data[ids,],methods,samp.method,
tuneLength,subset,perc.sub,prune,weights)$return.matrix
}
ret <- array(NA, dim=c(n.rep,length(methods),ncol(out[[1]])))
for(j in 1:n.rep){
ret[j,,] <- out[[j]]
}
ret.mean <- apply(ret,3,colMeans,na.rm=TRUE)
ret.var <- apply(ret,3,matrixStats::colVars,na.rm=TRUE)
ret.mean <- matrix(ret.mean,length(methods),7)
ret.var <- matrix(ret.var,length(methods),7)
row.names(ret.mean) <- methods
row.names(ret.var) <- methods
colnames(ret.mean) <- colnames(out[[i]])
colnames(ret.var) <- colnames(out[[i]])
res <- list()
res$means <- round(ret.mean,3)
res$variances <- round(ret.var,3)
res
}else{
tree <- dtree(formula,data,methods,samp.method,
tuneLength,subset,perc.sub,weights)$rpart.out
out <- stablelearner::stabletree(tree)
return(out)
}
stablelearner
if(stablelearner==FALSE){
for(i in 1:n.rep){
set.seed(i)
ids <- sample(nrow(data),nrow(data),replace=TRUE)
out[[i]] <- dtree(formula,data[ids,],methods,samp.method,
tuneLength,subset,perc.sub,prune,weights)$return.matrix
}
ret <- array(NA, dim=c(n.rep,length(methods),ncol(out[[1]])))
for(j in 1:n.rep){
ret[j,,] <- out[[j]]
}
ret.mean <- apply(ret,3,colMeans,na.rm=TRUE)
ret.var <- apply(ret,3,matrixStats::colVars,na.rm=TRUE)
ret.mean <- matrix(ret.mean,length(methods),7)
ret.var <- matrix(ret.var,length(methods),7)
row.names(ret.mean) <- methods
row.names(ret.var) <- methods
colnames(ret.mean) <- colnames(out[[i]])
colnames(ret.var) <- colnames(out[[i]])
res <- list()
res$means <- round(ret.mean,3)
res$variances <- round(ret.var,3)
res
}else{
tree <- dtree(formula,data,methods,samp.method,
tuneLength,subset,perc.sub,weights)$rpart.out
out <- stablelearner::stabletree(tree)
return(out)
}
stablelearner=TRUE
if(stablelearner==FALSE){
for(i in 1:n.rep){
set.seed(i)
ids <- sample(nrow(data),nrow(data),replace=TRUE)
out[[i]] <- dtree(formula,data[ids,],methods,samp.method,
tuneLength,subset,perc.sub,prune,weights)$return.matrix
}
ret <- array(NA, dim=c(n.rep,length(methods),ncol(out[[1]])))
for(j in 1:n.rep){
ret[j,,] <- out[[j]]
}
ret.mean <- apply(ret,3,colMeans,na.rm=TRUE)
ret.var <- apply(ret,3,matrixStats::colVars,na.rm=TRUE)
ret.mean <- matrix(ret.mean,length(methods),7)
ret.var <- matrix(ret.var,length(methods),7)
row.names(ret.mean) <- methods
row.names(ret.var) <- methods
colnames(ret.mean) <- colnames(out[[i]])
colnames(ret.var) <- colnames(out[[i]])
res <- list()
res$means <- round(ret.mean,3)
res$variances <- round(ret.var,3)
res
}else{
tree <- dtree(formula,data,methods,samp.method,
tuneLength,subset,perc.sub,weights)$rpart.out
out <- stablelearner::stabletree(tree)
return(out)
}
library(dtree)
(stab.out <- stability(medv ~., data=Boston,methods=c("rpart"),stablelearner=TRUE,samp.method="boot",tuneLength=5))
traceback()
(stab.out <- stability(medv ~., data=Boston,methods=c("rpart"),samp.method="boot",stablelearner=TRUE,tuneLength=5))
traceback()
library(dtree)
(stab.out <- stability(medv ~., data=Boston,methods=c("rpart"),samp.method="boot",stablelearner=TRUE,tuneLength=5))
library(dtree)
(stab.out <- stability(medv ~., data=Boston,methods=c("rpart"),samp.method="boot",stablelearner=TRUE,tuneLength=5))
(stab.out <- stability(medv ~., data=Boston,methods=c("rpart"),samp.method="boot",stablelearner=TRUE,tuneLength=5))
library(dtree)
(stab.out <- stability(medv ~., data=Boston,methods=c("rpart"),samp.method="boot",stablelearner=TRUE,tuneLength=5))
tree <- dtree(formula,data,methods,samp.method,
tuneLength,subset,perc.sub,weights)$rpart.out
print(1)
out <- list()
tree <- dtree(formula,data,methods,samp.method,
tuneLength,subset,perc.sub,weights)$rpart.out
print(tree)
(stab.out <- stability(medv ~., data=Boston,methods=c("rpart"),stablelearner=TRUE,samp.method="boot",tuneLength=5))
if(stablelearner==FALSE){
for(i in 1:n.rep){
set.seed(i)
ids <- sample(nrow(data),nrow(data),replace=TRUE)
out[[i]] <- dtree(formula,data[ids,],methods,samp.method,
tuneLength,subset,perc.sub,prune,weights)$return.matrix
}
ret <- array(NA, dim=c(n.rep,length(methods),ncol(out[[1]])))
for(j in 1:n.rep){
ret[j,,] <- out[[j]]
}
ret.mean <- apply(ret,3,colMeans,na.rm=TRUE)
ret.var <- apply(ret,3,matrixStats::colVars,na.rm=TRUE)
ret.mean <- matrix(ret.mean,length(methods),7)
ret.var <- matrix(ret.var,length(methods),7)
row.names(ret.mean) <- methods
row.names(ret.var) <- methods
colnames(ret.mean) <- colnames(out[[i]])
colnames(ret.var) <- colnames(out[[i]])
res <- list()
res$means <- round(ret.mean,3)
res$variances <- round(ret.var,3)
res
}else{
print(1)
out <- list()
tree <- dtree(formula,data,methods,samp.method,
tuneLength,subset,perc.sub,weights)$rpart.out
print(tree)
out <- stablelearner::stabletree(tree)
return(out)
}
out <- stablelearner::stabletree(tree)
return(out)
library(dtree)
(stab.out <- stability(medv ~., data=Boston,methods=c("rpart"),stablelearner=TRUE,samp.method="boot",tuneLength=5))
res <- list()
if(stablelearner==FALSE){
for(i in 1:n.rep){
set.seed(i)
ids <- sample(nrow(data),nrow(data),replace=TRUE)
out[[i]] <- dtree(formula,data[ids,],methods,samp.method,
tuneLength,subset,perc.sub,prune,weights)$return.matrix
}
ret <- array(NA, dim=c(n.rep,length(methods),ncol(out[[1]])))
for(j in 1:n.rep){
ret[j,,] <- out[[j]]
}
ret.mean <- apply(ret,3,colMeans,na.rm=TRUE)
ret.var <- apply(ret,3,matrixStats::colVars,na.rm=TRUE)
ret.mean <- matrix(ret.mean,length(methods),7)
ret.var <- matrix(ret.var,length(methods),7)
row.names(ret.mean) <- methods
row.names(ret.var) <- methods
colnames(ret.mean) <- colnames(out[[i]])
colnames(ret.var) <- colnames(out[[i]])
res$means <- round(ret.mean,3)
res$variances <- round(ret.var,3)
res
}else{
print(1)
out <- list()
tree <- dtree(formula,data,methods,samp.method,
tuneLength,subset,perc.sub,weights)$rpart.out
print(tree)
out <- stablelearner::stabletree(tree)
res$out <- out
}
stab.out <- stability(formula=medv ~.,
data=Boston,
methods=c("rpart"),
samp.method="cv",
tuneLength=2,
n.rep=100,
stablelearner=FALSE,
subset=FALSE,
perc.sub=.75,
weights=NULL)
stab.out <- stability(formula=medv ~.,
data=Boston,
methods=c("rpart"),
samp.method="cv",
tuneLength=2,
n.rep=100,
stablelearner=TRUE,
subset=FALSE,
perc.sub=.75,
weights=NULL)
stab.out <- stability(formula=medv ~.,
data=Boston,
methods=c("rpart"),
samp.method="cv",
tuneLength=2,
n.rep=100,
stablelearner=TRUE,
subset=FALSE,
perc.sub=.75,
weights=NULL)
library(dtree)
stab.out <- stability(formula=medv ~.,
data=Boston,
methods=c("rpart"),
samp.method="cv",
tuneLength=2,
n.rep=100,
stablelearner=TRUE,
subset=FALSE,
perc.sub=.75,
weights=NULL)
stab.out <- stability(formula=medv ~.,
data=Boston,
methods=c("rpart"),
samp.method="cv",
tuneLength=2,
n.rep=100,
stablelearner=TRUE,
subset=FALSE,
perc.sub=.75,
weights=NULL)
traceback()
stability
stable
library(dtree)
stab.out <- stable(formula=medv ~.,
data=Boston,
methods=c("rpart"),
samp.method="cv",
tuneLength=2,
n.rep=100,
stablelearner=TRUE,
subset=FALSE,
perc.sub=.75,
weights=NULL)
stab.out
summary(stab.out)
plot(stab.out)
summary(stab.out$out)
