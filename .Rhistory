}
breaks
tt = terms(formula,data=Boston2)
formula=medv~.
tt = terms(formula,data=Boston2)
preds <- unlist(attr(tt,"term.labels"))
preds
vars+1
library(dtree)
yy = dtree(medv~., Boston2,methods=c("evtree"),tuneLength=2)
yy
library(dtree)
yy = dtree(medv~., Boston2,methods=c("ctreePrune"),tuneLength=2)
yy
library(dtree)
yy = dtree(medv~., Boston2,methods=c("ctreePrune"),tuneLength=2)
yy
ctreePrune.out = yy$ctreePrune.out
ret.obj <- as.list(ctreePrune.out$node)
len <- length(ret.obj)
vars <- rep(NA,len)
for(i in 1:len){
if(is.null(ret.obj[[i]]$split$varid)==FALSE){
vars[i] <- ret.obj[[i]]$split$varid +1
}else{
vars[i] <- NA
}
}
vars
breaks <- rep(NA,len)
for(i in 1:len){
if(is.null(ret.obj[[i]]$split$breaks)==FALSE){
breaks[i] <- ret.obj[[i]]$split$breaks
}else{
breaks[i] <- NA
}
}
tt = terms(formula,data=data.train)
data.train=Boston2
formula=medv~.
tt = terms(formula,data=data.train)
tt
preds <- unlist(attr(tt,"term.labels"))
preds
vars
ret.obj <- as.list(ctreePrune.out$node)
len <- length(ret.obj)
vars <- rep(NA,len)
for(i in 1:len){
if(is.null(ret.obj[[i]]$split$varid)==FALSE){
vars[i] <- ret.obj[[i]]$split$varid +1
}else{
vars[i] <- NA
}
}
breaks <- rep(NA,len)
for(i in 1:len){
if(is.null(ret.obj[[i]]$split$breaks)==FALSE){
breaks[i] <- ret.obj[[i]]$split$breaks
}else{
breaks[i] <- NA
}
}
return.splits <- list()
if(return.matrix[1,"nsplits"] == 0){
return.splits <- as.data.frame(matrix(NA,1,2))
colnames(return.splits) <- c("var","val")
return.splits[1,1] <- "no split"
return.splits[1,2] <- 0
return.splits[1,1] <- as.character(return.splits[1,1])
return.splits[1,2] <- as.numeric(as.character(return.splits[1,2]))
}else{
tt = terms(formula,data=data.train)
preds <- unlist(attr(tt,"term.labels"))
breaks2 <- breaks[complete.cases(breaks)]
vars2 <- vars[complete.cases(vars)]
return.splits <- data.frame(cbind(preds[vars2],breaks2))
colnames(return.splits) <- c("var","val")
return.splits[,2] <- as.numeric(as.character(return.splits[,2]))
}
library(dtree)
yy = dtree(medv~., Boston2,methods=c("ctreePrune"),tuneLength=2)
yy
library(dtree)
yy = dtree(medv~., Boston2,methods=c("rpart"),tuneLength=2)
yy
yy = dtree(medv~., Boston,methods=c("rpart"),tuneLength=2)
yy
yy = dtree(medv~., Boston,methods=c("rpart"),tuneLength=1)
yy
yy = dtree(medv~., Boston,methods=c("rpart"),tuneLength=4)
yy
rpart.utils::rpart.subrules.table(yy$rpart.out)
rpart.utils::rpart.subrules.table(yy$rpart.out)[,2:5]
na.rm(rpart.utils::rpart.subrules.table(yy$rpart.out)[1,2:5])
rtree = rpart.utils::rpart.subrules.table(yy$rpart.out)[1,2:5]
rtree
rtree[is.na(rtree)==FALSE]
as.matrix(rtree[is.na(rtree)==FALSE])
rtree2 <- cbind(rtree[is.na(rtree)==FALSE])
rtree2 <- cbind(rtree[is.na(rtree)==FALSE])
rtree2
rtree2 <- data.frame(rtree[is.na(rtree)==FALSE])
rtree2
rtree2 <- (rtree[is.na(rtree)==FALSE])
rtree2
rtree2 <- matrix(rtree[is.na(rtree)==FALSE],1,2)
rtree2
library(dtree)
yy = dtree(medv~., Boston,methods=c("rpart"),tuneLength=4)
yy
yy = dtree(medv~., Boston2,methods=c("bump"),tuneLength=4)
yy = dtree(medv~., Boston2,methods=c("bump"),tuneLength=2,bump.rep=10)
traceback()
library(dtree)
yy = dtree(medv~., Boston2,methods=c("bump"),tuneLength=2,bump.rep=10)
traceback()
library(dtree)
library(dtree)
yy = dtree(medv~., Boston2,methods=c("bump"),tuneLength=2,bump.rep=10)
library(dtree)
yy = dtree(medv~., Boston2,methods=c("bump"),tuneLength=2,bump.rep=10)
library(dtree)
yy = dtree(medv~., Boston2,methods=c("bump"),tuneLength=2,bump.rep=10)
library(dtree)
yy = dtree(medv~., Boston2,methods=c("bump"),tuneLength=2,bump.rep=10)
library(dtree)
yy = dtree(medv~., Boston2,methods=c("bump"),tuneLength=2,bump.rep=10)
library(dtree)
yy = dtree(medv~., Boston2,methods=c("bump"),tuneLength=2,bump.rep=10)
yy
library(dtree)
yy = dtree(medv~., Boston2,methods=c("bump"),tuneLength=2,bump.rep=10)
yy
yy = dtree(medv~., Boston2,methods=c("rpart"),tuneLength=2,bump.rep=10)
yy
yy = dtree(medv~., Boston,methods=c("rpart"),tuneLength=2,bump.rep=10)
yy
yy = dtree(medv~., Boston,methods=c("rpart"),tuneLength=5,bump.rep=10)
yy
yy = dtree(medv~., Boston[1:50,],methods=c("rpart"),tuneLength=1,bump.rep=10)
yy
library(dtree)
library(dtree)
yy = dtree(medv~., Boston,methods=c("rpart","ctree"),tuneLength=1,bump.rep=10)
yy
library(dtree)
yy = dtree(medv~., Boston,methods=c("rpart","ctree"),tuneLength=1,bump.rep=10)
yy
library(dtree)
yy = dtree(medv~., Boston,methods=c("rpart","ctree"),tuneLength=1,bump.rep=10)
yy
library(dtree)
yy = dtree(medv~., Boston,methods=c("rpart","ctree"),tuneLength=1,bump.rep=10)
yy
yy = dtree(medv~., Boston,methods=c("ctree"),tuneLength=1,bump.rep=10)
yy = dtree(medv~., Boston,methods=c("ctree"),tuneLength=2,bump.rep=10)
traceback()
library(dtree)
yy = dtree(medv~., Boston,methods=c("ctree","rpart"),tuneLength=2,bump.rep=10)
yy
library(dtree)
yy = dtree(medv~., Boston,methods=c("ctree","rpart"),tuneLength=2,bump.rep=10)
yy
library(dtree)
library(dtree)
ret2 <- stable(medv~., Boston,methods=c("ctree","ctreePrune","rpart","evtree"),n.rep=50,bump.rep=20,
samp.method="cv",tuneLength=2,stablelearner=FALSE,parallel=TRUE)
library(MASS) # for boston data
data(Boston)
ret2 <- stable(medv~., Boston,methods=c("ctree","ctreePrune","rpart"),n.rep=50,bump.rep=20,
samp.method="cv",tuneLength=2,stablelearner=FALSE,parallel=TRUE)
ret2
?stable
ret2 <- stable(medv~., Boston,methods=c("ctree","ctreePrune","rpart"),n.rep=50,bump.rep=20,
samp.method="cv",tuneLength=2,stablelearner=FALSE,parallel=TRUE,roundVal=0)
ret2
yy = dtree(medv~., Boston,methods=c("ctree","rpart"),tuneLength=2,bump.rep=10)
yy
yy <- list()
for(i in 1:3){
yy[[i]] <- dtree(medv~., Boston,methods=c("ctree","rpart"),tuneLength=2,bump.rep=10)
}
yy <- list();tt <- list()
for(i in 1:3){
yy[[i]] <- dtree(medv~., Boston,methods=c("ctree","rpart"),tuneLength=2,bump.rep=10)
tt[[i]] = yy[[i]]$firstSplit
}
plyr::ldply(tt)
tt
?ldply
plyr::ldply(tt,table)
plyr::ldply(tt,freq)
lapply(tt,1,table)
apply(tt,1,table)
lapply(apply(tt,1,table))
lapply(apply(tt,1,table),table)
?lapply
lapply(tt,table)
lapply(tt,table,USE.NAMES=TRUE)
unlist(tt)
simplify2array(tt)
tt.array <- simplify2array(tt)
tt["ctree",]
tt["ctree",,]
tt[1,,]
tt[,1,]
str(tt)
tt.array["ctree",,]
table(tt.array["ctree",,])
table(tt.array["ctree",,][1,])
str(table(tt.array["ctree",,][1,]))
library(dtree)
ret2 <- stable(medv~., Boston,methods=c("ctree","ctreePrune","rpart"),n.rep=5,bump.rep=20,
samp.method="cv",tuneLength=2,stablelearner=FALSE,parallel=FALSE)
library(dtree)
ret2 <- stable(medv~., Boston,methods=c("ctree","ctreePrune","rpart"),n.rep=5,bump.rep=20,
samp.method="cv",tuneLength=2,stablelearner=FALSE,parallel=FALSE)
ret2
library(dtree)
ret2 <- stable(medv~., Boston,methods=c("ctree","ctreePrune","rpart"),n.rep=5,bump.rep=20,
samp.method="cv",tuneLength=2,stablelearner=FALSE,parallel=FALSE)
ret2
library(dtree)
ret2 <- stable(medv~., Boston,methods=c("ctree","ctreePrune","rpart"),n.rep=5,bump.rep=20,
samp.method="cv",tuneLength=2,stablelearner=FALSE,parallel=FALSE)
ret2
library(dtree)
?dtree
?sim_regDat
sim_regDat <- function(N,P,nonzero.num=NULL,beta.nonzero=NULL){
x=data.frame(matrix(rnorm(P*N),ncol=P))
if(is.null(nonzero.num)==TRUE){
beta <- rep(0,P)
}else{
beta <- c(beta.nonzero,rep(0,P-nonzero.num))
}
y <- as.matrix(x)%*%beta + rnorm(nrow(x),0,1)
return(data.frame(y,x))
}
?parLapply
samps <- c(100,500,2000)
npreds <- c(3,10,50)
samps <- c(100,500,2000)
npreds <- c(3,10,50)
grid <- expand.grid(samps=samps,npreds=npreds)
grid
par.fun <- function(vec){
library(dtree)
dat <- sim_regDat(vec[,"samps"],vec[,"npreds"])
dtree(y ~ .,dat,methods=c("rpart"),
samp.method="cv",tuneLength=3,bump.rep=50,subset,perc.sub,weights)$return.matrix[,"nodes"]
}
out <- list()
out <- parRapply(cl, grid,par.fun)
library(parallel)
out <- parRapply(cl, grid,par.fun)
no_cores <- detectCores() - 1
cl <- makeCluster(no_cores)
clusterExport(cl, c("sim_regDat","grid"))
par.fun <- function(vec){
library(dtree)
dat <- sim_regDat(vec[,"samps"],vec[,"npreds"])
dtree(y ~ .,dat,methods=c("rpart"),
samp.method="cv",tuneLength=3,bump.rep=50,subset,perc.sub,weights)$return.matrix[,"nodes"]
}
out <- list()
out <- parRapply(cl, grid,par.fun)
no_cores <- detectCores() - 1
cl <- makeCluster(no_cores)
clusterExport(cl, c("sim_regDat","grid"))
par.fun <- function(vec){
library(dtree)
dat <- sim_regDat(vec["samps"],vec["npreds"])
dtree(y ~ .,dat,methods=c("rpart"),
samp.method="cv",tuneLength=3,bump.rep=50,subset,perc.sub,weights)$return.matrix[,"nodes"]
}
out <- list()
out <- parRapply(cl, grid,par.fun)
no_cores <- detectCores() - 1
cl <- makeCluster(no_cores)
clusterExport(cl, c("sim_regDat","grid"))
par.fun <- function(vec){
library(dtree)
dat <- sim_regDat(vec["samps"],vec["npreds"])
dtree(y ~ .,dat,methods=c("rpart"),
samp.method="cv",tuneLength=3,bump.rep=50,
subset=FALSE,perc.sub=.75,weights=NULL)$return.matrix[,"nodes"]
}
out <- list()
out <- parRapply(cl, grid,par.fun)
out
no_cores <- detectCores() - 1
cl <- makeCluster(no_cores)
clusterExport(cl, c("sim_regDat","grid"))
par.fun <- function(vec){
library(dtree)
dat <- sim_regDat(vec["samps"],vec["npreds"])
dtree(y ~ .,dat,methods=c("rpart","ctree","ctreePrune"),
samp.method="cv",tuneLength=3,bump.rep=50,
subset=FALSE,perc.sub=.75,weights=NULL)$return.matrix[,"nodes"]
}
out <- list()
out <- parRapply(cl, grid,par.fun)
out
no_cores <- detectCores() - 1
cl <- makeCluster(no_cores)
clusterExport(cl, c("sim_regDat","grid"))
par.fun <- function(vec){
library(dtree)
dat <- sim_regDat(vec["samps"],vec["npreds"])
data.frame(dtree(y ~ .,dat,methods=c("rpart","ctree"),
samp.method="cv",tuneLength=3,bump.rep=50,
subset=FALSE,perc.sub=.75,weights=NULL)$return.matrix[,"nodes"],vec["samps"],vec["npreds"])
}
out <- list()
out <- parRapply(cl, grid,par.fun)
out
par.fun <- function(vec){
library(dtree)
dat <- sim_regDat(vec["samps"],vec["npreds"])
as.matrix(dtree(y ~ .,dat,methods=c("rpart","ctree"),
samp.method="cv",tuneLength=3,bump.rep=50,
subset=FALSE,perc.sub=.75,weights=NULL)$return.matrix[,"nodes"],vec["samps"],vec["npreds"])
}
out <- list()
out <- parRapply(cl, grid,par.fun)
out
no_cores <- detectCores() - 1
cl <- makeCluster(no_cores)
clusterExport(cl, c("sim_regDat","grid"))
par.fun <- function(vec){
library(dtree)
dat <- sim_regDat(vec["samps"],vec["npreds"])
out = data.frame(dtree(y ~ .,dat,methods=c("rpart","ctree"),
samp.method="cv",tuneLength=3,bump.rep=50,
subset=FALSE,perc.sub=.75,weights=NULL)$return.matrix[,"nodes"],vec["samps"],vec["npreds"])
colnames(out) = c(c("rpart","ctree"),"samps","npreds")
out
}
out <- parRapply(cl, grid,par.fun)
no_cores <- detectCores() - 1
cl <- makeCluster(no_cores)
clusterExport(cl, c("sim_regDat","grid"))
par.fun <- function(vec){
library(dtree)
dat <- sim_regDat(vec["samps"],vec["npreds"])
out = data.frame(dtree(y ~ .,dat,methods=c("rpart","ctree"),
samp.method="cv",tuneLength=3,bump.rep=50,
subset=FALSE,perc.sub=.75,weights=NULL)$return.matrix[,"nodes"],vec["samps"],vec["npreds"])
colnames(out) = c("method","samps","npreds")
out
}
out <- list()
out <- parRapply(cl, grid,par.fun)
out
par.fun <- function(vec){
library(dtree)
dat <- sim_regDat(vec["samps"],vec["npreds"])
out = t(data.frame(dtree(y ~ .,dat,methods=c("rpart","ctree"),
samp.method="cv",tuneLength=3,bump.rep=50,
subset=FALSE,perc.sub=.75,weights=NULL)$return.matrix[,"nodes"]))
out2 <- data.frame(out,vec["samps"],vec["npreds"])
colnames(out2) = c(c("rpart","ctree"),"samps","npreds")
out2
}
out <- list()
out <- parRapply(cl, grid,par.fun)
out
no_cores <- detectCores() - 1
cl <- makeCluster(no_cores)
clusterExport(cl, c("sim_regDat","grid"))
par.fun <- function(vec){
library(dtree)
dat <- sim_regDat(vec["samps"],vec["npreds"])
out = t(data.frame(dtree(y ~ .,dat,methods=c("rpart","ctree"),
samp.method="cv",tuneLength=3,bump.rep=50,
subset=FALSE,perc.sub=.75,weights=NULL)$return.matrix[,"nodes"]))
out2 <- data.frame(out,vec["samps"],vec["npreds"])
colnames(out2) = c(c("rpart","ctree"),"samps","npreds")
rownames(out2) <- NULL
out2
}
out <- list()
out <- parRapply(cl, grid,par.fun)
out
out <- parCapply(cl, grid,par.fun)
no_cores <- detectCores() - 1
cl <- makeCluster(no_cores)
clusterExport(cl, c("sim_regDat","grid"))
par.fun <- function(vec){
library(dtree)
dat <- sim_regDat(vec["samps"],vec["npreds"])
out = t(data.frame(dtree(y ~ .,dat,methods=c("rpart","ctree"),
samp.method="cv",tuneLength=3,bump.rep=50,
subset=FALSE,perc.sub=.75,weights=NULL)$return.matrix[,"nodes"]))
out2 <- data.frame(out,vec["samps"],vec["npreds"])
colnames(out2) = c(c("rpart","ctree"),"samps","npreds")
rownames(out2) <- NULL
out2
}
out <- list()
out <- parCapply(cl, grid,par.fun)
no_cores <- detectCores() - 1
cl <- makeCluster(no_cores)
clusterExport(cl, c("sim_regDat","grid"))
par.fun <- function(vec){
library(dtree)
dat <- sim_regDat(vec["samps"],vec["npreds"])
out = t(data.frame(dtree(y ~ .,dat,methods=c("rpart","ctree","ctreePrune","evtree","bump"),
samp.method="cv",tuneLength=3,bump.rep=50,
subset=FALSE,perc.sub=.75,weights=NULL)$return.matrix[,"nodes"]))
out2 <- data.frame(out,vec["samps"],vec["npreds"])
colnames(out2) = c(c("rpart","ctree","ctreePrune","evtree","bump"),"samps","npreds")
rownames(out2) <- NULL
out2
}
out <- parRapply(cl, grid,par.fun)
no_cores <- detectCores() - 1
cl <- makeCluster(no_cores)
clusterExport(cl, c("sim_regDat","grid"))
par.fun <- function(vec){
library(dtree)
dat <- sim_regDat(vec["samps"],vec["npreds"])
out = t(data.frame(dtree(y ~ .,dat,methods=c("rpart","ctree","ctreePrune","evtree","bump"),
samp.method="cv",tuneLength=3,bump.rep=50,
subset=FALSE,perc.sub=.75,weights=NULL)$return.matrix[,"nodes"]))
out2 <- data.frame(out,vec["samps"],vec["npreds"])
colnames(out2) = c(c("rpart","ctree","ctreePrune","evtree","bump"),"samps","npreds")
rownames(out2) <- NULL
out2
}
system.time(out <- parRapply(cl, grid,par.fun))
dat <- sim_regDat(200,100)
head(dat)
round(dat[,2:ncol(dat)],0)
no_cores <- detectCores() - 1
cl <- makeCluster(no_cores)
clusterExport(cl, c("sim_regDat","grid"))
par.fun <- function(vec){
library(dtree)
dat <- sim_regDat(vec["samps"],vec["npreds"])
dat2 <- round(dat[,2:ncol(dat)],0)
out = t(data.frame(dtree(y ~ .,dat2,methods=c("rpart","ctree","ctreePrune","evtree","bump"),
samp.method="cv",tuneLength=3,bump.rep=50,
subset=FALSE,perc.sub=.75,weights=NULL)$return.matrix[,"nodes"]))
out2 <- data.frame(out,vec["samps"],vec["npreds"])
colnames(out2) = c(c("rpart","ctree","ctreePrune","evtree","bump"),"samps","npreds")
rownames(out2) <- NULL
out2
}
system.time(out <- parRapply(cl, grid,par.fun))
dat2 <- round(dat[,2:ncol(dat)],0)
dat3 <- data.frame(y=dat$y,dat2)
head(dat3)
no_cores <- detectCores() - 1
cl <- makeCluster(no_cores)
clusterExport(cl, c("sim_regDat","grid"))
par.fun <- function(vec){
library(dtree)
dat <- sim_regDat(vec["samps"],vec["npreds"])
dat2 <- round(dat[,2:ncol(dat)],0)
dat3 <- data.frame(y=dat$y,dat2)
out = t(data.frame(dtree(y ~ .,dat3,methods=c("rpart","ctree","ctreePrune","evtree","bump"),
samp.method="cv",tuneLength=3,bump.rep=50,
subset=FALSE,perc.sub=.75,weights=NULL)$return.matrix[,"nodes"]))
out2 <- data.frame(out,vec["samps"],vec["npreds"])
colnames(out2) = c(c("rpart","ctree","ctreePrune","evtree","bump"),"samps","npreds")
rownames(out2) <- NULL
out2
}
system.time(out <- parRapply(cl, grid,par.fun))
out
no_cores <- detectCores() - 1
cl <- makeCluster(no_cores)
clusterExport(cl, c("sim_regDat","grid"))
par.fun <- function(vec){
library(dtree)
dat <- sim_regDat(vec["samps"],vec["npreds"])
dat2 <- round(dat[,2:ncol(dat)],0)
dat3 <- data.frame(y=dat$y,dat2)
out = t(data.frame(dtree(y ~ .,dat3,methods=c("rpart","ctree"),
samp.method="cv",tuneLength=3,bump.rep=50,
subset=FALSE,perc.sub=.75,weights=NULL)$return.matrix[,"nodes"]))
out2 <- data.frame(out,vec["samps"],vec["npreds"])
colnames(out2) = c(c("rpart","ctree"),"samps","npreds")
rownames(out2) <- NULL
out2
}
system.time(out <- parRapply(cl, grid,par.fun))
out
no_cores <- detectCores() - 1
cl <- makeCluster(no_cores)
clusterExport(cl, c("sim_regDat","grid"))
par.fun <- function(vec){
library(dtree)
dat <- sim_regDat(vec["samps"],vec["npreds"])
dat2 <- round(dat[,2:ncol(dat)],0)
dat3 <- data.frame(y=dat$y,dat2)
out = t(data.frame(dtree(y ~ .,dat3,methods=c("bump","evtree"),
samp.method="cv",tuneLength=3,bump.rep=50,
subset=FALSE,perc.sub=.75,weights=NULL)$return.matrix[,"nodes"]))
out2 <- data.frame(out,vec["samps"],vec["npreds"])
colnames(out2) = c(c("bump","evtree"),"samps","npreds")
rownames(out2) <- NULL
out2
}
system.time(out <- parRapply(cl, grid,par.fun))
yy <- list();tt <- list()
for(i in 1:3){
yy[[i]] <- dtree(medv~., Boston,methods=c("evtree","bump"),tuneLength=2,bump.rep=10)$return.matrix[,"nodes"]
}
