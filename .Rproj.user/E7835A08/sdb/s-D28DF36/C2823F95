{
    "collab_server" : "",
    "contents" : "#' Main function to calculate stability coefficients\n#'\n#' @param formula a formula, weight a response to left of ~.\n#' @param data Data frame to run models on\n#' @param methods Which tree methods to use. Defaults:\n#'        lm, rpart, tree, ctree, evtree. Also can use \"rf\" for random forests\n#' @param samp.method Sampling method. Refer to caret package trainControl()\n#'        documentation. Default is repeated cross-validation. Other options\n#'        include \"cv\" and \"boot\".\n#' @param tuneLength Number of tuning parameters to try. Applies to train()\n#' @param n.rep Number of times to replicate each method\n#' @param stablelearner Whether or not to use the stablelearner package to\n#'        calculate stability\n#' @param subset Whether to subset\n#' @param perc.sub What fraction of data to put into train dataset. 1-frac.sub\n#'        is allocated to test dataset. Defaults to 0.75\n#' @param weights Optional weights for each case.\n#'\n#'\n#'\n#' @export\n\n\n\nstable = function(formula,\n                 data,\n                 methods=c(\"lm\",\"rpart\",\"tree\",\"ctree\",\"evtree\"),\n                 samp.method=\"repeatedcv\",\n                 tuneLength=3,\n                 n.rep=100,\n                 stablelearner=FALSE,\n                 subset=FALSE,\n                 perc.sub=.75,\n                 weights=NULL){\n\n  res <- list()\n\n  if(stablelearner==FALSE){\n    print(2)\n    for(i in 1:n.rep){\n      set.seed(i)\n      ids <- sample(nrow(data),nrow(data),replace=TRUE)\n      out[[i]] <- dtree(formula,data[ids,],methods,samp.method,\n                        tuneLength,subset,perc.sub,prune,weights)$return.matrix\n    }\n    ret <- array(NA, dim=c(n.rep,length(methods),ncol(out[[1]])))\n\n    for(j in 1:n.rep){\n      ret[j,,] <- out[[j]]\n    }\n\n    ret.mean <- apply(ret,3,colMeans,na.rm=TRUE)\n    ret.var <- apply(ret,3,matrixStats::colVars,na.rm=TRUE)\n\n    ret.mean <- matrix(ret.mean,length(methods),7)\n    ret.var <- matrix(ret.var,length(methods),7)\n\n    row.names(ret.mean) <- methods\n    row.names(ret.var) <- methods\n\n    colnames(ret.mean) <- colnames(out[[i]])\n    colnames(ret.var) <- colnames(out[[i]])\n\n\n\n    res$means <- round(ret.mean,3)\n    res$variances <- round(ret.var,3)\n    res\n  }else{\n    print(1)\n    out <- list()\n    tree <- dtree(formula,data,methods,samp.method,\n             tuneLength,subset,perc.sub,weights)$rpart.out\n    print(tree)\n    out <- stablelearner::stabletree(tree)\n    res$out <- out\n  }\n\n\n\nreturn(res)\n\n\n}\n",
    "created" : 1484099641473.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "187275961",
    "id" : "C2823F95",
    "lastKnownWriteTime" : 1488853110,
    "last_content_update" : 1488853110753,
    "path" : "~/GitHub/dtree/R/stable.R",
    "project_path" : "R/stable.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 11,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}