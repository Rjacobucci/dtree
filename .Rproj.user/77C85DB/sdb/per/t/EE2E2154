{
    "collab_server" : "",
    "contents" : "\nevtree_ret <- function(formula, data.train, data.test,samp.method,tuneLength,subset,class.response, response,Metric){\n\nret <- list()\n\nif(class.response == \"numeric\" | class.response == \"integer\"){\n  return.matrix <- matrix(NA,1,7)\n  colnames(return.matrix) <- c(\"nodes\",\"nvar\",\"nsplits\",\"rmse.samp\",\n                               \"rsq.samp\",\"rmse.test\",\"rsq.test\")\n  repeats <- ifelse(grepl(\"repeatedcv\", samp.method), 10, 1)\n  ctrl <- trainControl(method=samp.method,repeats=repeats)\n}else{\n  return.matrix <- matrix(NA,1,7)\n  colnames(return.matrix) <- c(\"nodes\",\"nvar\",\"nsplits\",\"auc.samp\",\n                               \"accuracy.samp\",\"auc.test\",\"accuracy.test\")\n  fiveStats <- function(...) c(twoClassSummary(...),\n                               + defaultSummary(...))\n  ## Everything but the area under the ROC curve:\n  fourStats <- function (data, lev = levels(data$obs), model = NULL)\n  {\n\n    accKapp<-postResample(data[,\"pred\"],data[,\"obs\"])\n    out<-c(accKapp,\n           sensitivity(data[, \"pred\"], data[, \"obs\"], lev[1]),\n           specificity(data[, \"pred\"], data[, \"obs\"], lev[2]))\n    names(out)[3:4]<-c(\"Sens\",\"Spec\")\n    out\n  }\n  repeats <- ifelse(grepl(\"repeatedcv\", samp.method), 10, 1)\n  ctrl <- trainControl(method=samp.method,classProbs=TRUE,summaryFunction = fiveStats,repeats=repeats)\n}\n\ntrain.out <- train(formula,data.train,method=\"evtree\",tuneLength=tuneLength,\n                   trControl=ctrl,metric=Metric)\nevtree.out <- train.out$finalModel\n\n#if(inherits(train.out, \"try-error\")){\n#  return.matrix <- NA\n#}else{\n\n\n\n\n\n\n#min.error <- which(min(cp[,\"xerror\"]) == cp[,\"xerror\"])[1]\nreturn.matrix[1,\"nsplits\"] <- max(fitted(evtree.out)[,1]) - length(unique(fitted(evtree.out)[,1]))\n#return.matrix[1,\"fit.cv\"] <- cp[min.error,\"xerror\"]\n\n\n\n#depth(evtree.out$node)\n\nret.obj <- as.list(evtree.out$node)\nlen <- length(ret.obj)\n\nvars <- rep(NA,len)\nfor(i in 1:len){\n\n  if(is.null(ret.obj[[i]]$split$varid)==FALSE){\n    vars[i] <- ret.obj[[i]]$split$varid\n  }else{\n    vars[i] <- NA\n  }\n}\n\nvars2 <- vars[is.na(vars)==FALSE]\nvars3 <- length(unique(vars2))\n\nevtree.ret <- evtree.out\n#attributes(evtree.out)\n\n\nreturn.matrix[1,\"nvar\"] <- vars3\n\nreturn.matrix[1,\"nodes\"] <- length(unique(fitted(evtree.out)[,1]))\n\n\nind <- as.numeric(row.names(train.out$bestTune))\nif(class.response == \"numeric\" | class.response == \"integer\"){\n  #which(train.out$results[,\"cp\"] == train.out$bestTune)\n\n  return.matrix[1,\"rmse.samp\"] <- train.out$results[ind,\"RMSE\"]\n  #return.matrix[1,\"misfit.train\"] <- mean((data.train[,response] - predict(evtree.out))^2)/nrow(data.train)\n  return.matrix[1,\"rsq.samp\"] <- train.out$results[ind,\"Rsquared\"]\n\n  if(subset==FALSE){\n    return.matrix[1,\"rmse.test\"] <- NA\n    return.matrix[1,\"rsq.test\"] <- NA\n  }else{\n    return.matrix[1,\"rmse.test\"] <- mean((data.test[,response] -\n                                            predict(evtree.out,data.test))^2)/nrow(data.test)\n    return.matrix[1,\"rsq.test\"] <- (cor(data.test[,response],predict(evtree.out,data.test)))**2\n  }\n}else{\n  return.matrix[1,\"auc.samp\"] <- train.out$results[ind,\"ROC\"]\n  return.matrix[1,\"accuracy.samp\"] <- train.out$results[ind,\"Accuracy\"]\n\n  if(subset==FALSE){\n    return.matrix[1,\"auc.test\"] <- NA\n  }else{\n    return.matrix[1,\"auc.test\"] <- NA\n  }\n}\n\n#}\n\nret$vec <- return.matrix\nret$evtree.ret <- evtree.ret\nret$evtree.train <- train.out\nreturn(ret)\n\n}\n",
    "created" : 1490213275204.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3052206672",
    "id" : "EE2E2154",
    "lastKnownWriteTime" : 1490194504,
    "last_content_update" : 1490194504,
    "path" : "~/GitHub/dtree/R/evtree_ret.R",
    "project_path" : "R/evtree_ret.R",
    "properties" : {
    },
    "relative_order" : 9,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}