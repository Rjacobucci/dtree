{
    "collab_server" : "",
    "contents" : "library(ISLR)\ndata(Default)\nDefault=Default[1:1000,]\n\nlr.out <- glm(default~.,family=\"binomial\",data=Default)\nsummary(lr.out)\nsummary(lr.out)$coefficients[,\"Pr(>|z|)\"][-1]\n\nround(predict(lr.out,type=\"response\"))\n\nmean(round(predict(lr.out,type=\"response\"))+1 == as.numeric(Default$default))\n\n\nout <- dtree(default ~ ., data=Default,methods=c(\"ctree\"),tuneLength=2,samp.method=\"cv\")\nsummary(out)\n\n\n\nlibrary(boot)\n\nfit.vals <- function(formula, data, indices,response) {\n  d <- data[indices,] # allows boot to select sample\n  fit <- ctreePrune(formula, data=d)\n  rsq <- (cor(data[indices,response],predict(fit$tree)))**2\n  rmse <- sqrt(mean((data[indices,response] - predict(fit$tree))^2))\n  return(c(rsq,rmse))\n}\n\nresults <- boot(data=Boston, statistic=fit.vals,\n                R=20, formula=medv~., response=\"medv\")\n\ntrain.out <- train(default ~ ., data=Default,method=\"rpart\",\n                   trControl=ctrl,metric=Metric)\n\n\nret <- stable(default ~ ., data=Default,methods=c(\"evtree\"),n.rep=3,\n              samp.method=\"cv\",tuneLength=2,stablelearner=FALSE)\nplot(ret$rpart)\nsummary(ret$evtree)\nsummary(ret$rpart)\n\nrett <- unlist(ret)\nresults <- matrix(rett,100,18,byrow=FALSE)\n\ntt = train(default ~ ., data=Default,method=\"rpart\",tuneLength=1)$finalModel\n\n\n\nrpart.utils::rpart.subrules.table(tt)\n\n\nstr(partykit:::.list.rules.party(tt))\n\n\n(yy = CtreePathFunc(tt,Default))\nyy = out$evtree.splits\n\n\nyy[1]\n\n#pp <- data.frame(matrix(NA,length(yy),1))\npp <- list()\nfor(i in 1:length(yy)){\n  bb <- gsub(\"[> <= ]\", \"\", yy[i])\n  tt <- c(unique(unlist(strsplit(bb, \"&\"))))\n  pp = unique(c(pp,tt))\n}\noo <- unique(pp)\ngsub(\"[[:digit:]]\",\"\",oo[[1]])\n(stringr::str_extract(oo[[1]], \"[aA-zZ]+\"))\n(stringr::str_extract(oo[[1]],  \"\\\\d+\\\\.*\\\\d*\"))\n\nfor(i in 1:nrow(yy)){\n  pp <- list()\n  pp <- c(pp,unique(unlist(strsplit(levels(yy[i,2]), \",\"))))\n}\n\nmatt <- matrix(NA,length(pp),2)\nfor(j in 1:length(pp)){\n\n  rr <- strsplit(pp[[j]],\"[> <= ]\" )\n  rr2 <- rr[[1]][rr[[1]]!=\"\"]\n  matt[j,1] <- rr2[1]\n  matt[j,2] <- rr2[2]\n}\n\n\nvars <- ctree.ret$frame[,\"var\"]\nvars2 <- vars[vars != \"<leaf>\"]\nreturn.matrix[1,\"nvar\"] <- length(unique(vars2))\n\nreturn.matrix[1,\"nodes\"] <- length(vars[vars == \"<leaf>\"])\n\n\n\n\n\ntree1 <- partykit::ctree(default ~ ., data=Default,\n                         control=ctree_control(mincriterion=as.numeric(tt$bestTune)))\ntree2 <- prune(tree1,cp=as.numeric(tt$bestTune))\nee = stabletree(tree1)\nsummary(ee)\n\nout2 <- rpart(default ~ ., data=Default)\nout2\nlibrary(stablelearner)\nout8 <- stablelearner::stabletree(out2)\n\n\nevtree.out <- evtree::evtree(default ~ ., data=Default)\n\n\nlibrary(stablelearner)\nlibrary(MASS) # for boston data\ndata(Boston)\n\n\nlibrary(foreach)\nlibrary(doParallel)\n\ncl<-makeCluster(4)\nregisterDoParallel(cl)\n\n\nout <- dtree(medv ~., data=Boston,methods=c(\"rpart\"),tuneLength=2,samp.method=\"cv\")\n#summary(out)\n\n\nret.obj <- as.list(evtree.out$node)\nlen <- length(ret.obj)\n\nvars <- rep(NA,len)\nfor(i in 1:len){\n\n  if(is.null(ret.obj[[i]]$split$varid)==FALSE){\n    vars[i] <- ret.obj[[i]]$split$varid\n  }else{\n    vars[i] <- NA\n  }\n}\n\n\nbreaks <- rep(NA,len)\nfor(i in 1:len){\n\n  if(is.null(ret.obj[[i]]$split$breaks)==FALSE){\n    breaks[i] <- ret.obj[[i]]$split$breaks\n  }else{\n    breaks[i] <- NA\n  }\n}\n\n\n\n\n\nlength(evtree.out)\n\nfor(i in 1:length(evtree.out)){\n  print(evtree.out[[i]]$splits$varid)\n  print(evtree.out[[i]]$breaks)\n}\n\n\n\n\n\nout\n\n\nhh <- CtreePathFunc(out$evtree.out,Boston)\n\nforeach(exponent = 2:4,\n        .combine = list,\n        .multicombine = TRUE)  %dopar%\n  base^exponent\n\n\n\ndata.rep <- list()\nfor(i in 1:n.rep){\n  set.seed(i)\n  ids <- sample(nrow(data),nrow(data),replace=TRUE)\n  data.rep[[i]] <- data[ids,]\n}\nlibrary(parallel)\nno_cores <- detectCores() - 1\ncl <- makeCluster(no_cores)\nclusterExport(cl, c(\"formula\",\"methods\",\"samp.method\",\"tuneLength\"))\npar.fun <- function(data){\n  library(dtree)\n  dtree(formula,data,methods,samp.method,tuneLength)\n}\n\nout <- parLapply(cl, data.rep,par.fun)\n\nstopCluster(cl)\n\n\n\n\n\n\n\n\n# Initiate cluster\ncl <- makeCluster(no_cores)\n\nstopImplicitCluster()\n\nstab.out <- stable(formula=medv ~.,\n                   data=Boston[1:100,],\n                   methods=c(\"evtree\"),\n                   samp.method=\"cv\",\n                   tuneLength=2,\n                   n.rep=5,\n                   parallel=FALSE)\nstab.out\n\nnn <- stab.out$nn\nnn[,1] <- as.character(nn[,1])\ntt = split(nn, nn$var)\nsapply(split(nn, nn$var),table,simplify=TRUE)\n\n\nlapply(split(nn, nn$var),table)\ntable(tt$rm)\n\nww <- stab.out$where.freq$age\nsapply(split(where.freq, where.freq$var),\n       table)\n\nfor(i in 1:length(ww)){\n  print(sapply(split(ww[[i]], ww[[i]]$var),\n         table))\n}\n\nhh <- out$ctree.splits\ntab <- table(hh[,1])\n\nhh[,2]\n\nsapply(split(hh, hh$var),\n         table)\n\nnn <- plyr::ldply(ww)\nsapply(split(nn, nn$var),\n       table)\n\nunlist(ww,recursive=FALSE)\n\ntable(hh[,2])\n\ntt = terms(formula,data=Boston)\ntt = terms(formula,data=data)\npreds <- attr(tt,\"term.labels\")\nvar.count <- matrix(NA,n.rep,length(preds))\ncolnames(var.count) <- preds\n\n\nfor(j in 1:length(preds)){\n  var.count[preds[j]] <- tab[preds[j]]\n  if(is.na(var.count[preds[j]]==TRUE)) var.count[preds[j]] <- 0\n}\n\n\n\n\ntable(hh[,1])\n\npp <- list()\nfor(i in 1:length(hh$Path)){\n  bb <- gsub(\"[> <= ]\", \"\", hh$Path[i])\n  tt <- c(unique(unlist(strsplit(bb, \",\"))))\n  pp = unique(c(pp,tt))\n}\nret2 <- unique(pp)\nret3 <- data.frame(matrix(NA, length(ret2),2))\n\nfor(j in 1:length(ret2)){\n  ret3[j,1] <- stringr::str_extract(ret2[[j]], \"[aA-zZ]+\")\n  ret3[j,2] <- as.numeric(as.character(stringr::str_extract(ret2[[j]],  \"\\\\d+\\\\.*\\\\d*\")))\n}\n\n#ret3[,2] <- round(ret3[,2],3)\ncolnames(ret3) <- c(\"var\",\"val\")\nreturn.splits <- ret3\n\n\n\n\n\n\n\n\nhh2 <- hh[is.na(hh$Less == FALSE),]\nhh3 <- hh2[,c(\"Variable\",\"Value\")]\ncolnames(hh3) <- c(\"var\",\"val\")\n\n\nctrl <- trainControl(method=\"repeatedcv\")\ntrain.out <- train(medv ~., data=Boston,method=\"evtree\",tuneLength=1,\n                   trControl=ctrl)\nplot(train.out)\ntrain.out\nvarImp(train.out)\n\n summary(out)\n#' plot(out$rpart.out)\ntt <- rpart(medv ~., data=Boston)\nttt <- evtree(medv ~., data=Boston)\npartykit:::.list.rules.party(ttt)\n\nstab.out <- stable(formula=medv ~.,\n                       data=Boston,\n                       methods=c(\"rpart\"),\n                       samp.method=\"cv\",\n                       tuneLength=2,\n                       n.rep=100,\n                       stablelearner=TRUE,\n                       subset=FALSE,\n                       perc.sub=.75,\n                       weights=NULL)\n\nout99 <- stablelearner::stabletree(train.out$finalModel,B=20)\nsummary(out99)\n",
    "created" : 1490656001362.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1520820407",
    "id" : "DFD98381",
    "lastKnownWriteTime" : 1490661135,
    "last_content_update" : 1490661135282,
    "path" : "C:/Users/RJacobucci/Dropbox/dtree_examples.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 13,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}