out <- nodeprune(fit,nodesPru)
list(tree=out,info=datNo,pvalue=alpha)
}
##############################################################################
### This function collect information about nodes for trees grown using Ctree
##############################################################################
DFtreeInfo<-function(fit) {
############################################
### Calculates IDs and left and right nodes
############################################
#library(partykit)
nid <- nodeids(fit)
datNo <- nodeapply(fit, ids=nid, function(n) {
#
if (is.null(kids_node(n))) {
out <- data.frame(node= nodeids(n)[1],
left=NA,
right=NA)
}
if (!is.null(kids_node(n))) {
out <- data.frame(node= nodeids(n)[1],
left=nodeids(kids_node(n)[[1]])[1],
right=nodeids(kids_node(n)[[2]])[1])
}
out
})
datNo <- do.call("rbind",datNo)
#########################################
### Calculates the name of the covariates
### used in each split
#########################################
datNo$varName <- NA
if (!length(fit)==0) {
tmpNames <- names(data_party(fit))
temp<-nodeapply(fit,nid, FUN = function(n) {
tmp <- n$split$varid
tmpNames[tmp]
})
temp<-unlist(temp)
wher <- datNo$node %in% as.numeric(names(temp))
datNo$varName[wher]<-temp
}
###############################
### extract pvalues from nodes
###############################
if (!dim(datNo)[1]==1) {
temp<-nodeapply(fit, ids = nodeids(fit), function(n) info_node(n)$p.value)
pvalues<-sapply(1:length(temp),function(i){
if (is.null(temp[[i]])) out<-NA else out<-as.numeric(temp[[i]])
})
datNo$pvalue<-pvalues
}
if (dim(datNo)[1]==1) {
datNo$pvalue<-NA
}
###############################
### Defines terminal nodes
###############################
temp<-nodeids(fit,terminal=TRUE)
wher <- datNo$node %in% temp
datNo$terminal[wher]<-TRUE
datNo$terminal[!wher]<-FALSE
###############################
### Defines pruneYN column
###############################
datNo$pruneYN<-FALSE
###############################
### Defines FDRsigYN column
###############################
datNo$FDRsigYN<-NA
##########################################
#### Calculates identity of parent nodes
##########################################
datNo$parent<-NA
for (i in datNo$node) {
tmpil<-datNo$left[i]
tmpir<-datNo$right[i]
datNo$parent[tmpil]<-i
datNo$parent[tmpir]<-i
}
datNo
}
formula=y~.
data=dat.list[[i]]
possible.tune <- c(.05,.01,.001)
tune.ctreePrune=3
data.train=data
possible.tune <- c(.05,.01,.001)
tune <- possible.tune[1:tune.ctreePrune]
for(i in 1:length(tune.ctreePrune)){
out <- ctreePrune(formula=formula, data=data.train,qstar=tune[i])
}
out.list <- list()
out.list <- list()
for(i in 1:length(tune.ctreePrune)){
out.list[[i]] <- ctreePrune(formula=formula, data=data.train,qstar=tune[i])
}
out.list
length(tune.ctreePrune)
for(i in 1:tune.ctreePrune){
out.list[[i]] <- ctreePrune(formula=formula, data=data.train,qstar=tune[i])
}
out.list
for(i in 1:tune.ctreePrune){
met1 <- rep(NA,20)
met2 <- rep(NA,20)
for(i in 1:20){
set.seed(i)
ids1 <- sample(nrow(data.train),nrow(data.train),replace=TRUE)
train <- data.train[ids1,]
test <- data.train[-ids1,]
tt <- ctreePrune(formula=formula, data=train,qstar=tune[i])
if(class.response == "numeric" | class.response == "integer"){
met1[i] <- sqrt(mean((test[,response] - predict(tt$tree,test))^2))
pp = predict(tt$tree,test)
if(sd(pp)==0) pp <- pp+rnorm(length(pp),0,.000001)
met2[i] <- (cor(test[,response],pp))**2
}else{
if(all(duplicated(test[,response])[-1L])){
met1[i] <- NA
}else{
if(length(levels(class.response)) == 2){
met1[i] <- pROC::auc(test[,response],predict(tt$tree,test,type="prob")[,1])
}
}
met2[i] <- caret::confusionMatrix(test[,response],predict(tt$tree,test))$overall["Accuracy"]
}
}
print(met1);print(met2)
}
class.response="numeric"
for(i in 1:tune.ctreePrune){
met1 <- rep(NA,20)
met2 <- rep(NA,20)
for(i in 1:20){
set.seed(i)
ids1 <- sample(nrow(data.train),nrow(data.train),replace=TRUE)
train <- data.train[ids1,]
test <- data.train[-ids1,]
tt <- ctreePrune(formula=formula, data=train,qstar=tune[i])
if(class.response == "numeric" | class.response == "integer"){
met1[i] <- sqrt(mean((test[,response] - predict(tt$tree,test))^2))
pp = predict(tt$tree,test)
if(sd(pp)==0) pp <- pp+rnorm(length(pp),0,.000001)
met2[i] <- (cor(test[,response],pp))**2
}else{
if(all(duplicated(test[,response])[-1L])){
met1[i] <- NA
}else{
if(length(levels(class.response)) == 2){
met1[i] <- pROC::auc(test[,response],predict(tt$tree,test,type="prob")[,1])
}
}
met2[i] <- caret::confusionMatrix(test[,response],predict(tt$tree,test))$overall["Accuracy"]
}
}
print(met1);print(met2)
}
met1 <- rep(NA,20)
met2 <- rep(NA,20)
set.seed(i)
ids1 <- sample(nrow(data.train),nrow(data.train),replace=TRUE)
train <- data.train[ids1,]
test <- data.train[-ids1,]
tt <- ctreePrune(formula=formula, data=train,qstar=tune[j])
j=1
tt <- ctreePrune(formula=formula, data=train,qstar=tune[j])
if(class.response == "numeric" | class.response == "integer"){
met1[i] <- sqrt(mean((test[,response] - predict(tt$tree,test))^2))
pp = predict(tt$tree,test)
if(sd(pp)==0) pp <- pp+rnorm(length(pp),0,.000001)
met2[i] <- (cor(test[,response],pp))**2
}else{
if(all(duplicated(test[,response])[-1L])){
met1[i] <- NA
}else{
if(length(levels(class.response)) == 2){
met1[i] <- pROC::auc(test[,response],predict(tt$tree,test,type="prob")[,1])
}
}
met2[i] <- caret::confusionMatrix(test[,response],predict(tt$tree,test))$overall["Accuracy"]
}
class.response
head(data.train)
class.response="categorical"
for(j in 1:tune.ctreePrune){
met1 <- rep(NA,20)
met2 <- rep(NA,20)
for(i in 1:20){
set.seed(i)
ids1 <- sample(nrow(data.train),nrow(data.train),replace=TRUE)
train <- data.train[ids1,]
test <- data.train[-ids1,]
tt <- ctreePrune(formula=formula, data=train,qstar=tune[j])
if(class.response == "numeric" | class.response == "integer"){
met1[i] <- sqrt(mean((test[,response] - predict(tt$tree,test))^2))
pp = predict(tt$tree,test)
if(sd(pp)==0) pp <- pp+rnorm(length(pp),0,.000001)
met2[i] <- (cor(test[,response],pp))**2
}else{
if(all(duplicated(test[,response])[-1L])){
met1[i] <- NA
}else{
if(length(levels(class.response)) == 2){
met1[i] <- pROC::auc(test[,response],predict(tt$tree,test,type="prob")[,1])
}
}
met2[i] <- caret::confusionMatrix(test[,response],predict(tt$tree,test))$overall["Accuracy"]
}
}
print(met1);print(met2)
}
class.response
if(class.response == "numeric" | class.response == "integer"){
met1[i] <- sqrt(mean((test[,response] - predict(tt$tree,test))^2))
pp = predict(tt$tree,test)
if(sd(pp)==0) pp <- pp+rnorm(length(pp),0,.000001)
met2[i] <- (cor(test[,response],pp))**2
}else{
if(all(duplicated(test[,response])[-1L])){
met1[i] <- NA
}else{
if(length(levels(class.response)) == 2){
met1[i] <- pROC::auc(test[,response],predict(tt$tree,test,type="prob")[,1])
}
}
met2[i] <- caret::confusionMatrix(test[,response],predict(tt$tree,test))$overall["Accuracy"]
}
response
library(dtree)
library(dtree)
# continuous outcome
library(MASS) # for boston data
data(Boston)
out <- dtree(medv ~., data=Boston,methods=c("ctreePrune"),tuneLength=2)
traceback()
library(dtree)
out <- dtree(medv ~., data=Boston,methods=c("ctreePrune"),tuneLength=2)
library(dtree)
out <- dtree(medv ~., data=Boston,methods=c("ctreePrune"),tuneLength=2)
library(dtree)
out <- dtree(medv ~., data=Boston,methods=c("ctreePrune"),tuneLength=2)
library(dtree)
out <- dtree(medv ~., data=Boston,methods=c("ctreePrune"),tuneLength=2)
library(dtree)
out <- dtree(medv ~., data=Boston,methods=c("ctreePrune"),tuneLength=2)
library(dtree)
out <- dtree(medv ~., data=Boston,methods=c("ctreePrune"),tuneLength=2)
summary(out)
out <- dtree(default ~ ., data=Default,methods=c("lm","rpart","ctreePrune"))
# categorical outcome
library(ISLR)
data(Default)
out <- dtree(default ~ ., data=Default,methods=c("lm","rpart","ctreePrune"))
summary(out)
library(dtree)
library(dtree)
install.packages("tree")
data(Boston)
stab.out <- stable(formula=medv ~.,data=Boston,
methods=c("rpart","ctreePrune"),samp.method="cv",
tuneLength=2, n.rep=5, parallel=TRUE)
stab.out
library(dtree)
setwd("/Users/rjacobuc/Documents/github/dtree_paper1")
res.list <- readRDS("output.rds")
results <- res.list
stab.mat<- matrix(NA,20,5)
for(i in 1:20){
stab.mat[i,] <- results[[i]]$stability[1,2:6]
}
results[[i]]$stability
stab.mat<- matrix(NA,20,4)
for(i in 1:20){
stab.mat[i,] <- results[[i]]$stability
}
stab.mat
colnames(stab.mat) <- c("rpart","ctreePrune","ctree","evtree")
summary(stab.mat)
stab.mat2 <- round(stab.mat,2)
stab.mat2
write.table(stab.mat2, file = "stability_table.txt", sep = ",", quote = FALSE, row.names = F)
# turn into long format
stab.mat3 <- data.frame(time=1:20,stab.mat2)
colnames(stab.mat3) <- c("data","meth.1","meth.2","meth.3","meth.4")
stab.long <- reshape(stab.mat3,direction="long",varying=c("meth.1","meth.2","meth.3","meth.4"))
colnames(stab.long) <- c("Dataset","Method","Stability","id")
stab.long$Method <- as.factor(stab.long$Method)
stab.long <- reshape(stab.mat3,direction="long",varying=c("meth.1","meth.2","meth.3","meth.4"))
colnames(stab.long) <- c("Dataset","Method","Stability","id")
stab.long$Method <- as.factor(stab.long$Method)
levels(stab.long$Method) <- c("rpart","ctreePrune""ctree","evtree")
levels(stab.long$Method) <- c("rpart","ctreePrune","ctree","evtree")
p <- ggplot(stab.long, aes(Dataset,Stability,colour=Method)) + geom_line(aes(group = Method),size=1.2) +
theme(axis.text.y = element_text(colour = 'black', size = 12),
axis.title.y = element_text(size = 12)) +
theme(axis.text.x = element_text(colour = 'black', size = 12),
axis.title.x = element_text(size = 12))
print(p)
# create black and white
p <- ggplot(stab.long, aes(Dataset,Stability,colour=Method)) + geom_line(aes(group = Method),size=1.2) +
scale_fill_grey() +
theme(axis.text.y = element_text(colour = 'black', size = 12),
axis.title.y = element_text(size = 12)) +
theme(axis.text.x = element_text(colour = 'black', size = 12),
axis.title.x = element_text(size = 12))
print(p)
# create black and white
p <- ggplot(stab.long, aes(Dataset,Stability,colour=Method)) + geom_line(aes(group = Method),size=1.2) +
theme_bw() +
theme(axis.text.y = element_text(colour = 'black', size = 12),
axis.title.y = element_text(size = 12)) +
theme(axis.text.x = element_text(colour = 'black', size = 12),
axis.title.x = element_text(size = 12))
print(p)
# create black and white
p <- ggplot(stab.long, aes(Dataset,Stability,colour=Method)) + geom_line(aes(group = Method),size=1.2) +
theme(axis.text.y = element_text(colour = 'black', size = 12),
axis.title.y = element_text(size = 12)) +
theme(axis.text.x = element_text(colour = 'black', size = 12),
axis.title.x = element_text(size = 12))
print(p)
p + + scale_colour_grey()
p + scale_colour_grey()
# create black and white
p + scale_colour_grey() + theme_bw()
# create black and white
p <- ggplot(stab.long, aes(Dataset,Stability,colour=Method)) + geom_line(aes(group = Method,linetype=Method),size=1.2) +
theme(axis.text.y = element_text(colour = 'black', size = 12),
axis.title.y = element_text(size = 12)) +
theme(axis.text.x = element_text(colour = 'black', size = 12),
axis.title.x = element_text(size = 12))
p + scale_colour_grey() + theme_bw()
p <- ggplot(stab.long, aes(Dataset,Stability,colour=Method)) + geom_line(aes(group = Method,linetype=Method),size=1.2) +
theme(axis.text.y = element_text(colour = 'black', size = 12),
axis.title.y = element_text(size = 12)) +
theme(axis.text.x = element_text(colour = 'black', size = 12),
axis.title.x = element_text(size = 12))
p + scale_colour_grey()
p <- ggplot(stab.long, aes(Dataset,Stability,colour=Method)) +
geom_line(aes(group = Method,linetype=Method),size=1.2) +
theme(axis.text.y = element_text(colour = 'black', size = 12),
axis.title.y = element_text(size = 12)) +
theme(axis.text.x = element_text(colour = 'black', size = 12),
axis.title.x = element_text(size = 12)) +
scale_linetype_manual(values=c("twodash", "dotted"))
p + scale_colour_grey()
# create black and white
p <- ggplot(stab.long, aes(Dataset,Stability,colour=Method)) +
geom_line(aes(group = Method,linetype=Method),size=1.2) +
theme(axis.text.y = element_text(colour = 'black', size = 12),
axis.title.y = element_text(size = 12)) +
theme(axis.text.x = element_text(colour = 'black', size = 12),
axis.title.x = element_text(size = 12)) +
scale_linetype_manual(values=c("twodash", "dotted","solid","dotdash"))
p + scale_colour_grey()
# create black and white
p <- ggplot(stab.long, aes(Dataset,Stability,colour=Method)) +
geom_line(aes(group = Method,linetype=Method),size=1.2) +
theme(axis.text.y = element_text(colour = 'black', size = 12),
axis.title.y = element_text(size = 12)) +
theme(axis.text.x = element_text(colour = 'black', size = 12),
axis.title.x = element_text(size = 12)) +
scale_linetype_manual(values=c("twodash", "dotted","solid","dotdash"))
p + scale_colour_black()
# create black and white
p <- ggplot(stab.long, aes(Dataset,Stability)) +
geom_line(aes(group = Method,linetype=Method),size=1.2) +
theme(axis.text.y = element_text(colour = 'black', size = 12),
axis.title.y = element_text(size = 12)) +
theme(axis.text.x = element_text(colour = 'black', size = 12),
axis.title.x = element_text(size = 12)) +
scale_linetype_manual(values=c("twodash", "dotted","solid","dotdash"))
p + scale_colour_black()
# create black and white
p <- ggplot(stab.long, aes(Dataset,Stability)) +
geom_line(aes(group = Method,linetype=Method),size=1.2) +
theme(axis.text.y = element_text(colour = 'black', size = 12),
axis.title.y = element_text(size = 12)) +
theme(axis.text.x = element_text(colour = 'black', size = 12),
axis.title.x = element_text(size = 12)) +
scale_linetype_manual(values=c("twodash", "dotted","solid","dotdash"))
p + scale_colour_grey()
# create black and white
p <- ggplot(stab.long, aes(Dataset,Stability,colour=Method)) +
geom_line(aes(group = Method),size=1.2) + # ,linetype=Method
theme(axis.text.y = element_text(colour = 'black', size = 12),
axis.title.y = element_text(size = 12)) +
theme(axis.text.x = element_text(colour = 'black', size = 12),
axis.title.x = element_text(size = 12)) #+
#scale_linetype_manual(values=c("twodash", "dotted","solid","dotdash"))
p + scale_colour_black()
# create black and white
p <- ggplot(stab.long, aes(Dataset,Stability,colour=Method)) +
geom_line(aes(group = Method),size=1.2) + # ,linetype=Method
theme(axis.text.y = element_text(colour = 'black', size = 12),
axis.title.y = element_text(size = 12)) +
theme(axis.text.x = element_text(colour = 'black', size = 12),
axis.title.x = element_text(size = 12)) #+
#scale_linetype_manual(values=c("twodash", "dotted","solid","dotdash"))
p + scale_colour_grey()
colnames(stab.mat) <- c("CART","CTreePrune","CTree","Evtree")
stab.mat <- stab.mat[,c(1,3,2,4)]
summary(stab.mat)
stab.mat2 <- round(stab.mat,2)
write.table(stab.mat2, file = "stability_table.txt", sep = ",", quote = FALSE, row.names = F)
# turn into long format
stab.mat3 <- data.frame(time=1:20,stab.mat2)
colnames(stab.mat3) <- c("data","meth.1","meth.2","meth.3","meth.4")
stab.long <- reshape(stab.mat3,direction="long",varying=c("meth.1","meth.2","meth.3","meth.4"))
colnames(stab.long) <- c("Dataset","Method","Stability","id")
stab.long$Method <- as.factor(stab.long$Method)
levels(stab.long$Method) <- c("rpart","ctreePrune","ctree","evtree")
p <- ggplot(stab.long, aes(Dataset,Stability,colour=Method)) + geom_line(aes(group = Method),size=1.2) +
theme(axis.text.y = element_text(colour = 'black', size = 12),
axis.title.y = element_text(size = 12)) +
theme(axis.text.x = element_text(colour = 'black', size = 12),
axis.title.x = element_text(size = 12))
print(p)
# create black and white
p <- ggplot(stab.long, aes(Dataset,Stability,colour=Method)) +
geom_line(aes(group = Method),size=1.2) + # ,linetype=Method
theme(axis.text.y = element_text(colour = 'black', size = 12),
axis.title.y = element_text(size = 12)) +
theme(axis.text.x = element_text(colour = 'black', size = 12),
axis.title.x = element_text(size = 12)) #+
#scale_linetype_manual(values=c("twodash", "dotted","solid","dotdash"))
p + scale_colour_grey()
levels(stab.long$Method) <- c("CART","CTreePrune","CTree","Evtree")
p <- ggplot(stab.long, aes(Dataset,Stability,colour=Method)) + geom_line(aes(group = Method),size=1.2) +
theme(axis.text.y = element_text(colour = 'black', size = 12),
axis.title.y = element_text(size = 12)) +
theme(axis.text.x = element_text(colour = 'black', size = 12),
axis.title.x = element_text(size = 12))
print(p)
# create black and white
p <- ggplot(stab.long, aes(Dataset,Stability,colour=Method)) +
geom_line(aes(group = Method),size=1.2) + # ,linetype=Method
theme(axis.text.y = element_text(colour = 'black', size = 12),
axis.title.y = element_text(size = 12)) +
theme(axis.text.x = element_text(colour = 'black', size = 12),
axis.title.x = element_text(size = 12)) #+
#scale_linetype_manual(values=c("twodash", "dotted","solid","dotdash"))
p + scale_colour_grey()
nodes.mat<- matrix(NA,20,8)
results[[i]]$means
results[[i]]$variances
nodes.mat<- matrix(NA,20,8)
for(i in 1:20){
nodes.mat[i,c(1,3,5,7)] <- results[[i]]$means[,1]
nodes.mat[i,c(2,4,6,8)] <- sqrt(results[[i]]$variances[,1])
}
nodes.mat2 <- round(nodes.mat,2)
colnames(nodes.mat2) <- c("CART mean","CART sd","CTreePrune mean","CTreePrune sd",
"CTree mean","CTree sd",
"Evtree mean", "Evtree sd")
write.table(nodes.mat2, file = "nodes_table.txt", sep = ",", quote = FALSE, row.names = F)
nsplits.mat<- matrix(NA,20,8)
for(i in 1:20){
nsplits.mat[i,c(1,3,5,7)] <- results[[i]]$means[,3]
nsplits.mat[i,c(2,4,6,8)] <- sqrt(results[[i]]$variances[,3])
}
nsplits.mat2 <- round(nsplits.mat,2)
colnames(nsplits.mat2) <- c("rpart mean","rpart sd",
"ctreePrune mean","ctreePrune sd","ctree mean","ctree sd",
"evtree mean", "evtree sd")
nsplits.mat2
write.table(nsplits.mat2, file = "nsplits_table.txt", sep = ",", quote = FALSE, row.names = F)
results[[i]]$means
auc <- rep(NA,4)
rsq <- rep(NA,4)
for(i in 1:20){
if("auc.samp" %in% colnames(results[[i]]$means)){
auc <- rbind(auc,c(i,results[[i]]$means[,"auc.samp"]))
}else{
rsq <- rbind(rsq,c(i,results[[i]]$means[,"rsq.samp"]))
}
}
var <- matrix(NA,20,4)
for(i in 1:20){
if("auc.samp" %in% colnames(results[[i]]$means)){
var[i,] <- 2*sqrt(results[[i]]$variance[,4])
}else{
var[i,] <- 2*sqrt(results[[i]]$variance[,5])
}
}
auc
rsq
results[[i]]$means
i
i=1
results[[i]]$means
i=2
results[[i]]$means
i=3
results[[i]]$means
results[[i]]
possible.tune <- c(.95,.99,.999)
tune <- possible.tune[1:tune.ctreePrune]
tune.ctree=3
tune <- possible.tune[1:tune.ctree]
tune
grid = expand.grid(tune)
grid
names(grid) <- "mincriterion"
?train
library(dtree)
library(dtree)
library(dtree)
library(dtree)
install.packages("tree")
library(dtree)
