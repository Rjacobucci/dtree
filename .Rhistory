}
response
library(dtree)
library(dtree)
# continuous outcome
library(MASS) # for boston data
data(Boston)
out <- dtree(medv ~., data=Boston,methods=c("ctreePrune"),tuneLength=2)
traceback()
library(dtree)
out <- dtree(medv ~., data=Boston,methods=c("ctreePrune"),tuneLength=2)
library(dtree)
out <- dtree(medv ~., data=Boston,methods=c("ctreePrune"),tuneLength=2)
library(dtree)
out <- dtree(medv ~., data=Boston,methods=c("ctreePrune"),tuneLength=2)
library(dtree)
out <- dtree(medv ~., data=Boston,methods=c("ctreePrune"),tuneLength=2)
library(dtree)
out <- dtree(medv ~., data=Boston,methods=c("ctreePrune"),tuneLength=2)
library(dtree)
out <- dtree(medv ~., data=Boston,methods=c("ctreePrune"),tuneLength=2)
summary(out)
out <- dtree(default ~ ., data=Default,methods=c("lm","rpart","ctreePrune"))
# categorical outcome
library(ISLR)
data(Default)
out <- dtree(default ~ ., data=Default,methods=c("lm","rpart","ctreePrune"))
summary(out)
library(dtree)
library(dtree)
install.packages("tree")
data(Boston)
stab.out <- stable(formula=medv ~.,data=Boston,
methods=c("rpart","ctreePrune"),samp.method="cv",
tuneLength=2, n.rep=5, parallel=TRUE)
stab.out
library(dtree)
setwd("/Users/rjacobuc/Documents/github/dtree_paper1")
res.list <- readRDS("output.rds")
results <- res.list
stab.mat<- matrix(NA,20,5)
for(i in 1:20){
stab.mat[i,] <- results[[i]]$stability[1,2:6]
}
results[[i]]$stability
stab.mat<- matrix(NA,20,4)
for(i in 1:20){
stab.mat[i,] <- results[[i]]$stability
}
stab.mat
colnames(stab.mat) <- c("rpart","ctreePrune","ctree","evtree")
summary(stab.mat)
stab.mat2 <- round(stab.mat,2)
stab.mat2
write.table(stab.mat2, file = "stability_table.txt", sep = ",", quote = FALSE, row.names = F)
# turn into long format
stab.mat3 <- data.frame(time=1:20,stab.mat2)
colnames(stab.mat3) <- c("data","meth.1","meth.2","meth.3","meth.4")
stab.long <- reshape(stab.mat3,direction="long",varying=c("meth.1","meth.2","meth.3","meth.4"))
colnames(stab.long) <- c("Dataset","Method","Stability","id")
stab.long$Method <- as.factor(stab.long$Method)
stab.long <- reshape(stab.mat3,direction="long",varying=c("meth.1","meth.2","meth.3","meth.4"))
colnames(stab.long) <- c("Dataset","Method","Stability","id")
stab.long$Method <- as.factor(stab.long$Method)
levels(stab.long$Method) <- c("rpart","ctreePrune""ctree","evtree")
levels(stab.long$Method) <- c("rpart","ctreePrune","ctree","evtree")
p <- ggplot(stab.long, aes(Dataset,Stability,colour=Method)) + geom_line(aes(group = Method),size=1.2) +
theme(axis.text.y = element_text(colour = 'black', size = 12),
axis.title.y = element_text(size = 12)) +
theme(axis.text.x = element_text(colour = 'black', size = 12),
axis.title.x = element_text(size = 12))
print(p)
# create black and white
p <- ggplot(stab.long, aes(Dataset,Stability,colour=Method)) + geom_line(aes(group = Method),size=1.2) +
scale_fill_grey() +
theme(axis.text.y = element_text(colour = 'black', size = 12),
axis.title.y = element_text(size = 12)) +
theme(axis.text.x = element_text(colour = 'black', size = 12),
axis.title.x = element_text(size = 12))
print(p)
# create black and white
p <- ggplot(stab.long, aes(Dataset,Stability,colour=Method)) + geom_line(aes(group = Method),size=1.2) +
theme_bw() +
theme(axis.text.y = element_text(colour = 'black', size = 12),
axis.title.y = element_text(size = 12)) +
theme(axis.text.x = element_text(colour = 'black', size = 12),
axis.title.x = element_text(size = 12))
print(p)
# create black and white
p <- ggplot(stab.long, aes(Dataset,Stability,colour=Method)) + geom_line(aes(group = Method),size=1.2) +
theme(axis.text.y = element_text(colour = 'black', size = 12),
axis.title.y = element_text(size = 12)) +
theme(axis.text.x = element_text(colour = 'black', size = 12),
axis.title.x = element_text(size = 12))
print(p)
p + + scale_colour_grey()
p + scale_colour_grey()
# create black and white
p + scale_colour_grey() + theme_bw()
# create black and white
p <- ggplot(stab.long, aes(Dataset,Stability,colour=Method)) + geom_line(aes(group = Method,linetype=Method),size=1.2) +
theme(axis.text.y = element_text(colour = 'black', size = 12),
axis.title.y = element_text(size = 12)) +
theme(axis.text.x = element_text(colour = 'black', size = 12),
axis.title.x = element_text(size = 12))
p + scale_colour_grey() + theme_bw()
p <- ggplot(stab.long, aes(Dataset,Stability,colour=Method)) + geom_line(aes(group = Method,linetype=Method),size=1.2) +
theme(axis.text.y = element_text(colour = 'black', size = 12),
axis.title.y = element_text(size = 12)) +
theme(axis.text.x = element_text(colour = 'black', size = 12),
axis.title.x = element_text(size = 12))
p + scale_colour_grey()
p <- ggplot(stab.long, aes(Dataset,Stability,colour=Method)) +
geom_line(aes(group = Method,linetype=Method),size=1.2) +
theme(axis.text.y = element_text(colour = 'black', size = 12),
axis.title.y = element_text(size = 12)) +
theme(axis.text.x = element_text(colour = 'black', size = 12),
axis.title.x = element_text(size = 12)) +
scale_linetype_manual(values=c("twodash", "dotted"))
p + scale_colour_grey()
# create black and white
p <- ggplot(stab.long, aes(Dataset,Stability,colour=Method)) +
geom_line(aes(group = Method,linetype=Method),size=1.2) +
theme(axis.text.y = element_text(colour = 'black', size = 12),
axis.title.y = element_text(size = 12)) +
theme(axis.text.x = element_text(colour = 'black', size = 12),
axis.title.x = element_text(size = 12)) +
scale_linetype_manual(values=c("twodash", "dotted","solid","dotdash"))
p + scale_colour_grey()
# create black and white
p <- ggplot(stab.long, aes(Dataset,Stability,colour=Method)) +
geom_line(aes(group = Method,linetype=Method),size=1.2) +
theme(axis.text.y = element_text(colour = 'black', size = 12),
axis.title.y = element_text(size = 12)) +
theme(axis.text.x = element_text(colour = 'black', size = 12),
axis.title.x = element_text(size = 12)) +
scale_linetype_manual(values=c("twodash", "dotted","solid","dotdash"))
p + scale_colour_black()
# create black and white
p <- ggplot(stab.long, aes(Dataset,Stability)) +
geom_line(aes(group = Method,linetype=Method),size=1.2) +
theme(axis.text.y = element_text(colour = 'black', size = 12),
axis.title.y = element_text(size = 12)) +
theme(axis.text.x = element_text(colour = 'black', size = 12),
axis.title.x = element_text(size = 12)) +
scale_linetype_manual(values=c("twodash", "dotted","solid","dotdash"))
p + scale_colour_black()
# create black and white
p <- ggplot(stab.long, aes(Dataset,Stability)) +
geom_line(aes(group = Method,linetype=Method),size=1.2) +
theme(axis.text.y = element_text(colour = 'black', size = 12),
axis.title.y = element_text(size = 12)) +
theme(axis.text.x = element_text(colour = 'black', size = 12),
axis.title.x = element_text(size = 12)) +
scale_linetype_manual(values=c("twodash", "dotted","solid","dotdash"))
p + scale_colour_grey()
# create black and white
p <- ggplot(stab.long, aes(Dataset,Stability,colour=Method)) +
geom_line(aes(group = Method),size=1.2) + # ,linetype=Method
theme(axis.text.y = element_text(colour = 'black', size = 12),
axis.title.y = element_text(size = 12)) +
theme(axis.text.x = element_text(colour = 'black', size = 12),
axis.title.x = element_text(size = 12)) #+
#scale_linetype_manual(values=c("twodash", "dotted","solid","dotdash"))
p + scale_colour_black()
# create black and white
p <- ggplot(stab.long, aes(Dataset,Stability,colour=Method)) +
geom_line(aes(group = Method),size=1.2) + # ,linetype=Method
theme(axis.text.y = element_text(colour = 'black', size = 12),
axis.title.y = element_text(size = 12)) +
theme(axis.text.x = element_text(colour = 'black', size = 12),
axis.title.x = element_text(size = 12)) #+
#scale_linetype_manual(values=c("twodash", "dotted","solid","dotdash"))
p + scale_colour_grey()
colnames(stab.mat) <- c("CART","CTreePrune","CTree","Evtree")
stab.mat <- stab.mat[,c(1,3,2,4)]
summary(stab.mat)
stab.mat2 <- round(stab.mat,2)
write.table(stab.mat2, file = "stability_table.txt", sep = ",", quote = FALSE, row.names = F)
# turn into long format
stab.mat3 <- data.frame(time=1:20,stab.mat2)
colnames(stab.mat3) <- c("data","meth.1","meth.2","meth.3","meth.4")
stab.long <- reshape(stab.mat3,direction="long",varying=c("meth.1","meth.2","meth.3","meth.4"))
colnames(stab.long) <- c("Dataset","Method","Stability","id")
stab.long$Method <- as.factor(stab.long$Method)
levels(stab.long$Method) <- c("rpart","ctreePrune","ctree","evtree")
p <- ggplot(stab.long, aes(Dataset,Stability,colour=Method)) + geom_line(aes(group = Method),size=1.2) +
theme(axis.text.y = element_text(colour = 'black', size = 12),
axis.title.y = element_text(size = 12)) +
theme(axis.text.x = element_text(colour = 'black', size = 12),
axis.title.x = element_text(size = 12))
print(p)
# create black and white
p <- ggplot(stab.long, aes(Dataset,Stability,colour=Method)) +
geom_line(aes(group = Method),size=1.2) + # ,linetype=Method
theme(axis.text.y = element_text(colour = 'black', size = 12),
axis.title.y = element_text(size = 12)) +
theme(axis.text.x = element_text(colour = 'black', size = 12),
axis.title.x = element_text(size = 12)) #+
#scale_linetype_manual(values=c("twodash", "dotted","solid","dotdash"))
p + scale_colour_grey()
levels(stab.long$Method) <- c("CART","CTreePrune","CTree","Evtree")
p <- ggplot(stab.long, aes(Dataset,Stability,colour=Method)) + geom_line(aes(group = Method),size=1.2) +
theme(axis.text.y = element_text(colour = 'black', size = 12),
axis.title.y = element_text(size = 12)) +
theme(axis.text.x = element_text(colour = 'black', size = 12),
axis.title.x = element_text(size = 12))
print(p)
# create black and white
p <- ggplot(stab.long, aes(Dataset,Stability,colour=Method)) +
geom_line(aes(group = Method),size=1.2) + # ,linetype=Method
theme(axis.text.y = element_text(colour = 'black', size = 12),
axis.title.y = element_text(size = 12)) +
theme(axis.text.x = element_text(colour = 'black', size = 12),
axis.title.x = element_text(size = 12)) #+
#scale_linetype_manual(values=c("twodash", "dotted","solid","dotdash"))
p + scale_colour_grey()
nodes.mat<- matrix(NA,20,8)
results[[i]]$means
results[[i]]$variances
nodes.mat<- matrix(NA,20,8)
for(i in 1:20){
nodes.mat[i,c(1,3,5,7)] <- results[[i]]$means[,1]
nodes.mat[i,c(2,4,6,8)] <- sqrt(results[[i]]$variances[,1])
}
nodes.mat2 <- round(nodes.mat,2)
colnames(nodes.mat2) <- c("CART mean","CART sd","CTreePrune mean","CTreePrune sd",
"CTree mean","CTree sd",
"Evtree mean", "Evtree sd")
write.table(nodes.mat2, file = "nodes_table.txt", sep = ",", quote = FALSE, row.names = F)
nsplits.mat<- matrix(NA,20,8)
for(i in 1:20){
nsplits.mat[i,c(1,3,5,7)] <- results[[i]]$means[,3]
nsplits.mat[i,c(2,4,6,8)] <- sqrt(results[[i]]$variances[,3])
}
nsplits.mat2 <- round(nsplits.mat,2)
colnames(nsplits.mat2) <- c("rpart mean","rpart sd",
"ctreePrune mean","ctreePrune sd","ctree mean","ctree sd",
"evtree mean", "evtree sd")
nsplits.mat2
write.table(nsplits.mat2, file = "nsplits_table.txt", sep = ",", quote = FALSE, row.names = F)
results[[i]]$means
auc <- rep(NA,4)
rsq <- rep(NA,4)
for(i in 1:20){
if("auc.samp" %in% colnames(results[[i]]$means)){
auc <- rbind(auc,c(i,results[[i]]$means[,"auc.samp"]))
}else{
rsq <- rbind(rsq,c(i,results[[i]]$means[,"rsq.samp"]))
}
}
var <- matrix(NA,20,4)
for(i in 1:20){
if("auc.samp" %in% colnames(results[[i]]$means)){
var[i,] <- 2*sqrt(results[[i]]$variance[,4])
}else{
var[i,] <- 2*sqrt(results[[i]]$variance[,5])
}
}
auc
rsq
results[[i]]$means
i
i=1
results[[i]]$means
i=2
results[[i]]$means
i=3
results[[i]]$means
results[[i]]
possible.tune <- c(.95,.99,.999)
tune <- possible.tune[1:tune.ctreePrune]
tune.ctree=3
tune <- possible.tune[1:tune.ctree]
tune
grid = expand.grid(tune)
grid
names(grid) <- "mincriterion"
?train
library(dtree)
library(dtree)
library(dtree)
library(dtree)
install.packages("tree")
library(dtree)
library(dtree)
rm(list=ls())
library(MASS);library(lavaan);library(psych);library(ISLR);library(dtree);library(rpart.utils)
whichRep <- as.numeric(Sys.getenv("SGE_TASK_ID"))
nSlots <- as.numeric(Sys.getenv("NSLOTS"))
if(is.na(whichRep)) whichRep <- 1
library(parallel)
library(regsem)
dat.select <- 1:20
grid <- expand.grid(dat.select=dat.select)
dat.num <- grid[whichRep,"dat.select"]
####
HS <- HolzingerSwineford1939[complete.cases(HolzingerSwineford1939),-c(1,4)]
names(HS)[3] <- "y"
HS$y <- as.factor(HS$y)
HS$sex <- as.factor(HS$sex)
HS$ageyr <- as.factor(HS$ageyr)
HS$grade <- as.factor(HS$grade)
HS[,5:13] <- round(HS[,5:13],1)
levels(HS$y) <- c("GW","P")
####
FB2 <- FacialBurns[,-c(2)]
names(FB2)[1] <- "y"
FB2$Sex <- as.factor(FB2$Sex)
#####
bfi2 <- bfi[complete.cases(bfi),-c(27:28)]
bfi2$gender <- as.factor(bfi2$gender)
names(bfi2)[26] <- "y"
levels(bfi2$y) <- c("M","F")
#####
eb2 <- epi.bfi[,1:11]
names(eb2)[11] <- "y"
#####
names(crabs)[1] <- "y"
crabs2 <- crabs[,-c(2,3)]
#####
names(Wage)[11] <- "y"
Wage2 <- Wage[1:1000,-10]
#####
names(cats)[1] <- "y"
#####
Cars932 <- Cars93[complete.cases(Cars93),-c(1,2,27)]
# predict origin
names(Cars932)[24] <- "y"
levels(Cars932$y) <- c("USA","nUSA")
######
Boston$chas <- as.factor(Boston$chas)
names(Boston)[14] <- "y"
######
birthwt2 <- birthwt[,-10]
birthwt2$low <- as.factor(birthwt2$low)
names(birthwt2)[1] <- "y"
birthwt2$ptl<- as.factor(birthwt2$ptl)
birthwt2$ht <- as.factor(birthwt2$ht)
birthwt2$ui <- as.factor(birthwt2$ui)
birthwt2$ftv <- as.factor(birthwt2$ftv)
levels(birthwt2$y) <- c("low","high")
######
biopsy2 <- biopsy[complete.cases(biopsy),-c(1)]
names(biopsy2)[10] <- "y"
#levels(biopsy2$y) <- c("1","2")
######
names(College)[2] <- "y" #Apps
College2 <- College[,-c(11:17)]
#####
names(quine)[5] <- "y"
#####
names(Pima.tr)[8] <- "y"
#####
OME2 <- OME[,-1]
OME2$y <- OME2$Correct/OME2$Trials
OME3 <- OME2[,-c(5:6)]
#####
nlschools2 <- nlschools[1:1000,-3]
names(nlschools2)[1] <- "y"
str(nlschools2)
#####
names(minn38)[2] <- "y"
minn382 <- minn38[,-5]
levels(minn382$y) <- c("C","N","N","N")
#####
names(swiss)[1] <- "y" #fertility
######
names(Default)[1] <- "y"
Default2 <- Default[1:2000,]
#####
data(Sacramento)
names(Sacramento)[7] <- "y"
Sacramento2 <- Sacramento[,-c(1,2,8:9)]
Sacramento2$y <- round(Sacramento2$y,-4)
Sacramento2$sqft <- round(Sacramento2$sqft,-2)
############ data
dat.list <- list(HS,FB2,bfi2,crabs2,eb2,Wage2,cats,Cars932,Boston,
birthwt2,biopsy2,College,quine,Pima.tr,OME3,nlschools2,minn382,
swiss,Default2,Sacramento2)
# problems with nlschools, error with minn382
res.out <- list()
for(i in 1:5){
dat.num=i
res.out[[i]] <- stable(y~., dat.list[[dat.num]],
methods=c("rpart","ctreePrune","ctree","evtree"),n.rep=1,
samp.method="cv",tuneLength=c(15,3,3,3))
print(i)
}
for(i in 1:5){
dat.num=i
res.out[[i]] <- stable(y~., dat.list[[dat.num]],
methods=c("rpart","ctreePrune","ctree","evtree"),n.rep=2,
samp.method="cv",tuneLength=c(15,3,3,3))
print(i)
}
res.out
i=4
res.out[[i]] <- stable(y~., dat.list[[dat.num]],
methods=c("rpart"),n.rep=2,
samp.method="cv",tuneLength=c(5))
res.out
# problems with nlschools, error with minn382
res.out <- list()
res.out[[i]] <- stable(y~., dat.list[[dat.num]],
methods=c("rpart"),n.rep=2,
samp.method="cv",tuneLength=c(5))
res.out
# problems with nlschools, error with minn382
res.out <- list()
i=3
res.out[[i]] <- stable(y~., dat.list[[dat.num]],
methods=c("rpart"),n.rep=2,
samp.method="cv",tuneLength=c(5))
res.out
i
# problems with nlschools, error with minn382
res.out <- list()
dat.num=i
res.out[[i]] <- stable(y~., dat.list[[dat.num]],
methods=c("rpart"),n.rep=2,
samp.method="cv",tuneLength=c(5))
res.out
tt <- dtree(y~., dat.list[[dat.num]],
methods=c("rpart"),#n.rep=2,
samp.method="cv",tuneLength=c(5))
tt
library(pROC)
tt <- dtree(y~., dat.list[[dat.num]],
methods=c("rpart"),#n.rep=2,
samp.method="cv",tuneLength=c(5))
tt
library(dtree)
tt <- dtree(y~., dat.list[[dat.num]],
methods=c("rpart"),#n.rep=2,
samp.method="cv",tuneLength=c(5))
tt <- dtree(y~., dat.list[[dat.num]],
methods=c("rpart"),#n.rep=2,
samp.method="cv",tuneLength=c(5))
library(dtree)
tt <- dtree(y~., dat.list[[dat.num]],
methods=c("rpart"),#n.rep=2,
samp.method="cv",tuneLength=c(5))
tt <- dtree(y~., dat.list[[dat.num]],
methods=c("rpart"),#n.rep=2,
samp.method="cv",tuneLength=c(5))
library(dtree)
library(dtree)
library(dtree)
tt <- dtree(y~., dat.list[[dat.num]],
methods=c("rpart"),#n.rep=2,
samp.method="cv",tuneLength=c(5))
library(dtree)
tt <- dtree(y~., dat.list[[dat.num]],
methods=c("rpart"),#n.rep=2,
samp.method="cv",tuneLength=c(5))
library(ISLR)
data(Default)
#'
out <- dtree(default ~ ., data=Default,methods=c("lm","rpart"))
str(Default)
library(dtree)
#'
out <- dtree(default ~ ., data=Default,methods=c("lm","rpart"))
summary(out)
library(dtree)
#'
out <- dtree(default ~ ., data=Default,methods=c("rpart"))
summary(out)
library(dtree)
library(dtree)
#'
out <- dtree(default ~ ., data=Default,methods=c("rpart"))
summary(out)
?evtree
library(dtree)
library(dtree)
#'
out <- dtree(default ~ ., data=Default[1:100,],methods=c("evtree"),tuneLength=1)
library(dtree)
#'
out <- dtree(default ~ ., data=Default[1:100,],methods=c("evtree"),tuneLength=1)
library(dtree)
library(dtree)
#'
out <- dtree(default ~ ., data=Default[1:100,],methods=c("evtree"),tuneLength=1)
#'
out <- dtree(default ~ ., data=Default[1:300,],methods=c("evtree"),tuneLength=1)
library(dtree)
#'
out <- dtree(default ~ ., data=Default[1:300,],methods=c("evtree"),tuneLength=1)
summary(out)
?predict.evtree
library(dtree)
#'
out <- dtree(default ~ ., data=Default[1:300,],methods=c("evtree"),tuneLength=1)
library(dtree)
#'
out <- dtree(default ~ ., data=Default[1:300,],methods=c("evtree"),tuneLength=1)
?colMeans
t = cbind(c(1,2,3),c(1,NA,3))
max(colMeans(t))
max(colMeans(t,na.rm=T))
library(dtree)
#'
out <- dtree(default ~ ., data=Default[1:300,],methods=c("evtree"),tuneLength=1)
summary(out)
plot(out$evtree.out)
tt <- dtree(y~., dat.list[[dat.num]],
methods=c("rpart","ctree","ctreePrune","evtree"),#n.rep=2,
samp.method="cv",tuneLength=c(5,3,3,1))
library(dtree)
