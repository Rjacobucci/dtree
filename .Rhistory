out <- parRapply(cl, grid,par.fun)
out
out <- parCapply(cl, grid,par.fun)
no_cores <- detectCores() - 1
cl <- makeCluster(no_cores)
clusterExport(cl, c("sim_regDat","grid"))
par.fun <- function(vec){
library(dtree)
dat <- sim_regDat(vec["samps"],vec["npreds"])
out = t(data.frame(dtree(y ~ .,dat,methods=c("rpart","ctree"),
samp.method="cv",tuneLength=3,bump.rep=50,
subset=FALSE,perc.sub=.75,weights=NULL)$return.matrix[,"nodes"]))
out2 <- data.frame(out,vec["samps"],vec["npreds"])
colnames(out2) = c(c("rpart","ctree"),"samps","npreds")
rownames(out2) <- NULL
out2
}
out <- list()
out <- parCapply(cl, grid,par.fun)
no_cores <- detectCores() - 1
cl <- makeCluster(no_cores)
clusterExport(cl, c("sim_regDat","grid"))
par.fun <- function(vec){
library(dtree)
dat <- sim_regDat(vec["samps"],vec["npreds"])
out = t(data.frame(dtree(y ~ .,dat,methods=c("rpart","ctree","ctreePrune","evtree","bump"),
samp.method="cv",tuneLength=3,bump.rep=50,
subset=FALSE,perc.sub=.75,weights=NULL)$return.matrix[,"nodes"]))
out2 <- data.frame(out,vec["samps"],vec["npreds"])
colnames(out2) = c(c("rpart","ctree","ctreePrune","evtree","bump"),"samps","npreds")
rownames(out2) <- NULL
out2
}
out <- parRapply(cl, grid,par.fun)
no_cores <- detectCores() - 1
cl <- makeCluster(no_cores)
clusterExport(cl, c("sim_regDat","grid"))
par.fun <- function(vec){
library(dtree)
dat <- sim_regDat(vec["samps"],vec["npreds"])
out = t(data.frame(dtree(y ~ .,dat,methods=c("rpart","ctree","ctreePrune","evtree","bump"),
samp.method="cv",tuneLength=3,bump.rep=50,
subset=FALSE,perc.sub=.75,weights=NULL)$return.matrix[,"nodes"]))
out2 <- data.frame(out,vec["samps"],vec["npreds"])
colnames(out2) = c(c("rpart","ctree","ctreePrune","evtree","bump"),"samps","npreds")
rownames(out2) <- NULL
out2
}
system.time(out <- parRapply(cl, grid,par.fun))
dat <- sim_regDat(200,100)
head(dat)
round(dat[,2:ncol(dat)],0)
no_cores <- detectCores() - 1
cl <- makeCluster(no_cores)
clusterExport(cl, c("sim_regDat","grid"))
par.fun <- function(vec){
library(dtree)
dat <- sim_regDat(vec["samps"],vec["npreds"])
dat2 <- round(dat[,2:ncol(dat)],0)
out = t(data.frame(dtree(y ~ .,dat2,methods=c("rpart","ctree","ctreePrune","evtree","bump"),
samp.method="cv",tuneLength=3,bump.rep=50,
subset=FALSE,perc.sub=.75,weights=NULL)$return.matrix[,"nodes"]))
out2 <- data.frame(out,vec["samps"],vec["npreds"])
colnames(out2) = c(c("rpart","ctree","ctreePrune","evtree","bump"),"samps","npreds")
rownames(out2) <- NULL
out2
}
system.time(out <- parRapply(cl, grid,par.fun))
dat2 <- round(dat[,2:ncol(dat)],0)
dat3 <- data.frame(y=dat$y,dat2)
head(dat3)
no_cores <- detectCores() - 1
cl <- makeCluster(no_cores)
clusterExport(cl, c("sim_regDat","grid"))
par.fun <- function(vec){
library(dtree)
dat <- sim_regDat(vec["samps"],vec["npreds"])
dat2 <- round(dat[,2:ncol(dat)],0)
dat3 <- data.frame(y=dat$y,dat2)
out = t(data.frame(dtree(y ~ .,dat3,methods=c("rpart","ctree","ctreePrune","evtree","bump"),
samp.method="cv",tuneLength=3,bump.rep=50,
subset=FALSE,perc.sub=.75,weights=NULL)$return.matrix[,"nodes"]))
out2 <- data.frame(out,vec["samps"],vec["npreds"])
colnames(out2) = c(c("rpart","ctree","ctreePrune","evtree","bump"),"samps","npreds")
rownames(out2) <- NULL
out2
}
system.time(out <- parRapply(cl, grid,par.fun))
out
no_cores <- detectCores() - 1
cl <- makeCluster(no_cores)
clusterExport(cl, c("sim_regDat","grid"))
par.fun <- function(vec){
library(dtree)
dat <- sim_regDat(vec["samps"],vec["npreds"])
dat2 <- round(dat[,2:ncol(dat)],0)
dat3 <- data.frame(y=dat$y,dat2)
out = t(data.frame(dtree(y ~ .,dat3,methods=c("rpart","ctree"),
samp.method="cv",tuneLength=3,bump.rep=50,
subset=FALSE,perc.sub=.75,weights=NULL)$return.matrix[,"nodes"]))
out2 <- data.frame(out,vec["samps"],vec["npreds"])
colnames(out2) = c(c("rpart","ctree"),"samps","npreds")
rownames(out2) <- NULL
out2
}
system.time(out <- parRapply(cl, grid,par.fun))
out
no_cores <- detectCores() - 1
cl <- makeCluster(no_cores)
clusterExport(cl, c("sim_regDat","grid"))
par.fun <- function(vec){
library(dtree)
dat <- sim_regDat(vec["samps"],vec["npreds"])
dat2 <- round(dat[,2:ncol(dat)],0)
dat3 <- data.frame(y=dat$y,dat2)
out = t(data.frame(dtree(y ~ .,dat3,methods=c("bump","evtree"),
samp.method="cv",tuneLength=3,bump.rep=50,
subset=FALSE,perc.sub=.75,weights=NULL)$return.matrix[,"nodes"]))
out2 <- data.frame(out,vec["samps"],vec["npreds"])
colnames(out2) = c(c("bump","evtree"),"samps","npreds")
rownames(out2) <- NULL
out2
}
system.time(out <- parRapply(cl, grid,par.fun))
yy <- list();tt <- list()
for(i in 1:3){
yy[[i]] <- dtree(medv~., Boston,methods=c("evtree","bump"),tuneLength=2,bump.rep=10)$return.matrix[,"nodes"]
}
library(MASS) # for boston data
data(Boston)
yy = dtree(medv~., Boston[1:100,],methods=c("ctree","rpart"),tuneLength=2,bump.rep=10)$return.matrix[,"nodes"]
library(dtree)
yy = dtree(medv~., Boston[1:100,],methods=c("ctree","rpart"),tuneLength=2,bump.rep=10)$return.matrix[,"nodes"]
yy = dtree(medv~., Boston[1:100,],methods=c("bump","evtree"),tuneLength=2,bump.rep=10)$return.matrix[,"nodes"]
yy
sim_regDat <- function(N,P,nonzero.num=NULL,beta.nonzero=NULL){
x=data.frame(matrix(rnorm(P*N),ncol=P))
if(is.null(nonzero.num)==TRUE){
beta <- rep(0,P)
}else{
beta <- c(beta.nonzero,rep(0,P-nonzero.num))
}
y <- as.matrix(x)%*%beta + rnorm(nrow(x),0,1)
return(data.frame(y,x))
}
library(parallel)
niter <- 100
samps <- c(100,500,2000)
npreds <- c(3,10,50)
grid <- expand.grid(samps=samps,npreds=npreds)
par.fun <- function(vec){
library(dtree)
dat <- sim_regDat(vec["samps"],vec["npreds"])
dat2 <- round(dat[,2:ncol(dat)],0)
dat3 <- data.frame(y=dat$y,dat2)
out = t(data.frame(dtree(y ~ .,dat3,methods=c("bump","evtree"),
samp.method="cv",tuneLength=1,bump.rep=1,
subset=FALSE,perc.sub=.75,weights=NULL)$return.matrix[,"nodes"]))
out2 <- data.frame(out,vec["samps"],vec["npreds"])
colnames(out2) = c(c("bump","evtree"),"samps","npreds")
rownames(out2) <- NULL
out2
}
out <- parRapply(cl, grid,par.fun)
no_cores <- detectCores() - 1
cl <- makeCluster(no_cores)
clusterExport(cl, c("sim_regDat","grid"))
par.fun <- function(vec){
library(dtree)
dat <- sim_regDat(vec["samps"],vec["npreds"])
dat2 <- round(dat[,2:ncol(dat)],0)
dat3 <- data.frame(y=dat$y,dat2)
out = t(data.frame(dtree(y ~ .,dat3,methods=c("bump","evtree"),
samp.method="cv",tuneLength=1,bump.rep=1,
subset=FALSE,perc.sub=.75,weights=NULL)$return.matrix[,"nodes"]))
out2 <- data.frame(out,vec["samps"],vec["npreds"])
colnames(out2) = c(c("bump","evtree"),"samps","npreds")
rownames(out2) <- NULL
out2
}
out <- parRapply(cl, grid,par.fun)
out
par.fun <- function(vec){
library(dtree)
dat <- sim_regDat(vec["samps"],vec["npreds"])
dat2 <- round(dat[,2:ncol(dat)],0)
dat3 <- data.frame(y=dat$y,dat2)
out = t(data.frame(dtree(y ~ .,dat3,methods=c("bump"),
samp.method="cv",tuneLength=1,bump.rep=5,
subset=FALSE,perc.sub=.75,weights=NULL)$return.matrix[,"nodes"]))
out2 <- data.frame(out,vec["samps"],vec["npreds"])
colnames(out2) = c(c("bump"),"samps","npreds")
rownames(out2) <- NULL
out2
}
out <- parRapply(cl, grid,par.fun)
dtree(medv~., Boston[1:100,],methods=c("bump"),tuneLength=2,bump.rep=10)$return.matrix
no_cores <- detectCores() - 1
cl <- makeCluster(no_cores)
clusterExport(cl, c("sim_regDat","grid"))
par.fun <- function(vec){
library(dtree)
dat <- sim_regDat(vec["samps"],vec["npreds"])
dat2 <- round(dat[,2:ncol(dat)],0)
dat3 <- data.frame(y=dat$y,dat2)
out = t(data.frame(dtree(y ~ .,dat3,methods=c("bump"),
samp.method="cv",tuneLength=1,bump.rep=5,
subset=FALSE,perc.sub=.75,weights=NULL)$return.matrix[,"nodes"]))
out2 <- data.frame(out,vec["samps"],vec["npreds"])
colnames(out2) = c(c("bump"),"samps","npreds")
rownames(out2) <- NULL
out2
}
out <- parRapply(cl, grid,par.fun)
par.fun <- function(vec){
library(dtree)
dat <- sim_regDat(vec["samps"],vec["npreds"])
dat2 <- round(dat[,2:ncol(dat)],0)
dat3 <- data.frame(y=dat$y,dat2)
out = t(data.frame(dtree(y ~ .,dat3,methods=c("bump"),
samp.method="cv",tuneLength=1,bump.rep=5,
subset=FALSE,perc.sub=.75,weights=NULL)$return.matrix))
#out2 <- data.frame(out,vec["samps"],vec["npreds"])
#colnames(out2) = c(c("bump"),"samps","npreds")
#rownames(out2) <- NULL
out
}
out <- parRapply(cl, grid,par.fun)
dat <- sim_regDat(200,10)
dat2 <- round(dat[,2:ncol(dat)],0)
dat3 <- data.frame(y=dat$y,dat2)
out = t(data.frame(dtree(y ~ .,dat3,methods=c("bump"),
samp.method="cv",tuneLength=1,bump.rep=5,
subset=FALSE,perc.sub=.75,weights=NULL)$return.matrix))
out
dat <- sim_regDat(200,10)
dat2 <- round(dat[,2:ncol(dat)],0)
dat3 <- data.frame(y=dat$y,dat2)
out = t(data.frame(dtree(y ~ .,dat3,methods=c("bump"),
samp.method="cv",tuneLength=1,bump.rep=5,
subset=FALSE,perc.sub=.75,weights=NULL)$return.matrix[,"nodes"]))
dat <- sim_regDat(200,10)
dat2 <- round(dat[,2:ncol(dat)],0)
dat3 <- data.frame(y=dat$y,dat2)
out = data.frame(dtree(y ~ .,dat3,methods=c("bump"),
samp.method="cv",tuneLength=1,bump.rep=5,
subset=FALSE,perc.sub=.75,weights=NULL)$return.matrix[,"nodes"])
dat <- sim_regDat(200,10)
dat2 <- round(dat[,2:ncol(dat)],0)
dat3 <- data.frame(y=dat$y,dat2)
out = data.frame(dtree(y ~ .,dat3,methods=c("bump"),
samp.method="cv",tuneLength=1,bump.rep=5,
subset=FALSE,perc.sub=.75,weights=NULL)$return.matrix)
dat <- sim_regDat(200,10)
dat2 <- round(dat[,2:ncol(dat)],0)
dat3 <- data.frame(y=dat$y,dat2)
out = dtree(y ~ .,dat3,methods=c("bump"),
samp.method="cv",tuneLength=1,bump.rep=5,
subset=FALSE,perc.sub=.75,weights=NULL)$return.matrix
dat <- sim_regDat(200,10)
dat2 <- round(dat[,2:ncol(dat)],0)
dat3 <- data.frame(y=dat$y,dat2)
head(dat3)
out = dtree(y ~ .,dat3,methods=c("bump"),samp.method="cv",tuneLength=1,bump.rep=5,subset=FALSE,perc.sub=.75,weights=NULL)
traceback()
library(dtree)
out = dtree(y ~ .,dat3,methods=c("bump"),samp.method="cv",tuneLength=1,bump.rep=5,subset=FALSE,perc.sub=.75,weights=NULL)
library(dtree)
out = dtree(y ~ .,dat3,methods=c("bump"),samp.method="cv",tuneLength=1,bump.rep=5,subset=FALSE,perc.sub=.75,weights=NULL)
out
traceback()
library(dtree)
out = dtree(y ~ .,dat3,methods=c("bump"),samp.method="cv",tuneLength=1,bump.rep=5,subset=FALSE,perc.sub=.75,weights=NULL)
out
no_cores <- detectCores() - 1
cl <- makeCluster(no_cores)
clusterExport(cl, c("sim_regDat","grid"))
par.fun <- function(vec){
library(dtree)
dat <- sim_regDat(vec["samps"],vec["npreds"])
dat2 <- round(dat[,2:ncol(dat)],0)
dat3 <- data.frame(y=dat$y,dat2)
out = t(data.frame(dtree(y ~ .,dat3,methods=c("rpart","ctree","ctreePrune","evtree","bump"),
samp.method="cv",tuneLength=3,bump.rep=50,
subset=FALSE,perc.sub=.75,weights=NULL)$return.matrix[,"nodes"]))
out2 <- data.frame(out,vec["samps"],vec["npreds"])
colnames(out2) = c(c("rpart","ctree","ctreePrune","evtree","bump"),"samps","npreds")
rownames(out2) <- NULL
out2
}
system.time(out <- parRapply(cl, grid,par.fun))
dat <- sim_regDat(100,10)
dat2 <- round(dat[,2:ncol(dat)],0)
dat3 <- data.frame(y=dat$y,dat2)
out = t(data.frame(dtree(y ~ .,dat3,methods=c("rpart","ctree","ctreePrune","evtree","bump"),
samp.method="cv",tuneLength=3,bump.rep=50,
subset=FALSE,perc.sub=.75,weights=NULL)$return.matrix[,"nodes"]))
traceback()
library(dtree)
library(dtree)
dat <- sim_regDat(100,10)
dat2 <- round(dat[,2:ncol(dat)],0)
dat3 <- data.frame(y=dat$y,dat2)
out = t(data.frame(dtree(y ~ .,dat3,methods=c("bump"),
samp.method="cv",tuneLength=3,bump.rep=50,
subset=FALSE,perc.sub=.75,weights=NULL)$return.matrix[,"nodes"]))
library(dtree)
dat <- sim_regDat(100,10)
dat2 <- round(dat[,2:ncol(dat)],0)
dat3 <- data.frame(y=dat$y,dat2)
out = t(data.frame(dtree(y ~ .,dat3,methods=c("bump"),
samp.method="cv",tuneLength=3,bump.rep=50,
subset=FALSE,perc.sub=.75,weights=NULL)$return.matrix[,"nodes"]))
no_cores <- detectCores() - 1
cl <- makeCluster(no_cores)
clusterExport(cl, c("sim_regDat","grid"))
par.fun <- function(vec){
library(dtree)
dat <- sim_regDat(vec["samps"],vec["npreds"])
dat2 <- round(dat[,2:ncol(dat)],0)
dat3 <- data.frame(y=dat$y,dat2)
out = t(data.frame(dtree(y ~ .,dat3,methods=c("rpart","ctree","ctreePrune","evtree","bump"),
samp.method="cv",tuneLength=3,bump.rep=50,
subset=FALSE,perc.sub=.75,weights=NULL)$return.matrix[,"nodes"]))
out2 <- data.frame(out,vec["samps"],vec["npreds"])
colnames(out2) = c(c("rpart","ctree","ctreePrune","evtree","bump"),"samps","npreds")
rownames(out2) <- NULL
out2
}
system.time(out <- parRapply(cl, grid,par.fun))
out
dat <- sim_regDat(200,10)
dat2 <- round(dat[,2:ncol(dat)],0)
dat3 <- data.frame(y=dat$y,dat2)
dat <- sim_regDat(200,10)
dat2 <- round(dat[,2:ncol(dat)],0)
dat3 <- data.frame(y=dat$y,dat2)
out = t(data.frame(dtree(y ~ .,dat3,methods=c("evtree"),
samp.method="cv",tuneLength=3,bump.rep=50,
subset=FALSE,perc.sub=.75,weights=NULL)$return.matrix[,"nodes"]))
out
out = dtree(y ~ .,dat3,methods=c("evtree"),
samp.method="cv",tuneLength=3,bump.rep=50,
subset=FALSE,perc.sub=.75,weights=NULL)
out
library(dtree)
library(dtree)
library(MASS);library(lavaan);library(psych);library(ISLR);library(dtree)
####
HS <- HolzingerSwineford1939[complete.cases(HolzingerSwineford1939),-c(1,4)]
names(HS)[3] <- "y"
HS$y <- as.factor(HS$y)
HS$sex <- as.factor(HS$sex)
HS$ageyr <- as.factor(HS$ageyr)
HS$grade <- as.factor(HS$grade)
HS[,5:13] <- round(HS[,5:13],1)
levels(HS$y) <- c("GW","P")
####
FB2 <- FacialBurns[,-c(2)]
names(FB2)[1] <- "y"
FB2$Sex <- as.factor(FB2$Sex)
#####
bfi2 <- bfi[complete.cases(bfi),-c(27:28)]
bfi2$gender <- as.factor(bfi2$gender)
names(bfi2)[26] <- "y"
levels(bfi2$y) <- c("M","F")
#####
eb2 <- epi.bfi[,1:11]
names(eb2)[11] <- "y"
#####
names(crabs)[1] <- "y"
crabs2 <- crabs[,-c(2,3)]
#####
names(Wage)[12] <- "y"
Wage2 <- Wage[,-11]
#####
names(cats)[1] <- "y"
#####
Cars932 <- Cars93[,-c(1,2,27)]
# predict origin
names(Cars932)[24] <- "y"
levels(Cars932$y) <- c("USA","nUSA")
######
Boston$chas <- as.factor(Boston$chas)
names(Boston)[14] <- "y"
######
birthwt2 <- birthwt[,-10]
birthwt2$low <- as.factor(birthwt2$low)
names(birthwt2)[1] <- "y"
birthwt2$ptl<- as.factor(birthwt2$ptl)
birthwt2$ht <- as.factor(birthwt2$ht)
birthwt2$ui <- as.factor(birthwt2$ui)
birthwt2$ftv <- as.factor(birthwt2$ftv)
levels(birthwt2$y) <- c("low","high")
######
biopsy2 <- biopsy[complete.cases(biopsy),-c(1)]
names(biopsy2)[10] <- "y"
#levels(biopsy2$y) <- c("1","2")
######
names(College)[2] <- "y" #Apps
#####
names(quine)[5] <- "y"
#####
names(Pima.tr)[8] <- "y"
#####
OME2 <- OME[,-1]
OME2$y <- OME2$Correct/OME2$Trials
OME3 <- OME2[,-c(5:6)]
#####
nlschools2 <- nlschools[,-3]
names(nlschools2)[1] <- "y"
str(nlschools2)
#####
names(minn38)[2] <- "y"
minn382 <- minn38[,-5]
levels(minn382$y) <- c("C","N","N","N")
#####
names(swiss)[1] <- "y" #fertility
######
names(Default)[1] <- "y"
#####
library(caret)
data(Sacramento)
str(Sacramento)
names(Sacramento)[7] <- "y"
Sacramento2 <- Sacramento[,-c(2,8:9)]
############ data
library(beepr)
dat.list1 <- list(HS,FB2,bfi2,crabs2,eb2,Wage2,cats,Cars932,Boston,
birthwt2)
dat.list2 <- list(biopsy2,College,quine,Pima.tr,OME3,nlschools2,minn382,
swiss,Default,Sacramento2)
res.out <- list()
for(i in 1:10){
res.out[[i]] <- stable(y~., dat.list1[[i]],methods=c("rpart","ctree","ctreePrune","evtree","bump"),n.rep=5,bump.rep=20,
samp.method="cv",tuneLength=3,stablelearner=FALSE,parallel=FALSE)
print(i)
}
tt <- dtree(y~., dat.list2[[7]],methods=c("ctree"),bump.rep=20,samp.method="cv",tuneLength=3)
tt <- dtree(y~., dat.list2[[7]],methods=c("evtree"),bump.rep=20,samp.method="cv",tuneLength=3)
tt <- dtree(y~., dat.list2[[7]],methods=c("ctreePrune"),bump.rep=20,samp.method="cv",tuneLength=3)
tt <- dtree(y~., dat.list2[[8]],methods=c("ctree"),bump.rep=20,samp.method="cv",tuneLength=3)
tt <- dtree(y~., dat.list2[[8]],methods=c("rpart"),bump.rep=20,samp.method="cv",tuneLength=3)
tt <- dtree(y~., dat.list2[[8]],methods=c("evtree"),bump.rep=20,samp.method="cv",tuneLength=3)
tt <- dtree(y~., dat.list2[[8]],methods=c("bump"),bump.rep=20,samp.method="cv",tuneLength=3)
tt <- dtree(y~., dat.list2[[8]],methods=c("ctreePrune"),bump.rep=20,samp.method="cv",tuneLength=3)
traceback()
library(dtree)
tt
res.out
res.out <- list()
for(i in 8:10){
res.out[[i]] <- stable(y~., dat.list1[[i]],methods=c("rpart","ctree","ctreePrune","evtree","bump"),n.rep=5,bump.rep=20,
samp.method="cv",tuneLength=3,stablelearner=FALSE,parallel=FALSE)
print(i)
}
traceback()
tt <- dtree(y~., dat.list2[[8]],methods=c("rpart"),bump.rep=20,samp.method="cv",tuneLength=3)
tt <- dtree(y~., dat.list2[[8]],methods=c("rpart"),bump.rep=20,samp.method="cv",tuneLength=5)
tt <- dtree(y~., dat.list2[[8]],methods=c("rpart"),bump.rep=20,samp.method="cv",tuneLength=3)
tt
str(dat.list2[[8]])
for(i in 8:10){
res.out[[i]] <- stable(y~., dat.list1[[i]],methods=c("rpart","ctree","ctreePrune","evtree","bump"),n.rep=5,bump.rep=20,
samp.method="cv",tuneLength=3,stablelearner=FALSE,parallel=FALSE)
print(i)
}
traceback()
for(i in 9:10){
res.out[[i]] <- stable(y~., dat.list1[[i]],methods=c("rpart","ctree","ctreePrune","evtree","bump"),n.rep=5,bump.rep=20,
samp.method="cv",tuneLength=3,stablelearner=FALSE,parallel=FALSE)
print(i)
}
for(i in 8:8){
res.out[[i]] <- stable(y~., dat.list1[[i]],methods=c("rpart","ctree","ctreePrune","evtree","bump"),n.rep=5,bump.rep=20,
samp.method="cv",tuneLength=3,stablelearner=FALSE,parallel=FALSE)
print(i)
}
library(dtree)
()
for(i in 8:8){
res.out[[i]] <- stable(y~., dat.list1[[i]],methods=c("rpart","ctree","ctreePrune","evtree","bump"),n.rep=5,bump.rep=20,
samp.method="cv",tuneLength=3,stablelearner=FALSE,parallel=FALSE)
print(i)
}
summary(dat.list1[[8]])
Cars932 <- Cars93[complete.cases(Cars932),-c(1,2,27)]
# predict origin
names(Cars932)[24] <- "y"
levels(Cars932$y) <- c("USA","nUSA")
dat.list1 <- list(HS,FB2,bfi2,crabs2,eb2,Wage2,cats,Cars932,Boston,
birthwt2)
library(dtree)
res.out <- list()
for(i in 8:8){
res.out[[i]] <- stable(y~., dat.list1[[i]],methods=c("rpart","ctree","ctreePrune","evtree","bump"),n.rep=5,bump.rep=20,
samp.method="cv",tuneLength=3,stablelearner=FALSE,parallel=FALSE)
print(i)
}
summary(dat.list1[[1]])
ttt = stable(y~., dat.list1[[1]],methods=c("rpart","ctree","ctreePrune","evtree","bump"),bump.rep=20,n.rep=2,
samp.method="cv",tuneLength=3,parallel=TRUE)
ttt
ttt$n.ret
res.out <- list()
for(i in 1:10){
res.out[[i]] <- stable(y~., dat.list1[[i]],methods=c("rpart","ctree","ctreePrune","evtree","bump"),n.rep=5,bump.rep=20,
samp.method="cv",tuneLength=3,stablelearner=FALSE,parallel=TRUE,ncore=5)
print(i)
}
library(dtree)
library(dtree)
