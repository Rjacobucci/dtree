?sample
library(dtree)
library(MASS) # for boston data
data(Boston)
out <- dtree(medv ~., data=Boston)
library(dtree)
library(dtree)
library(dtree)
out <- dtree(medv ~., data=Boston)
library(dtree)
out <- dtree(medv ~., data=Boston)
rpart.Boston <- rpart(medv ~., data=Boston,weights=NA)
library(dtree)
library(dtree)
out <- dtree(medv ~., data=Boston)
rpart.Boston <- rpart::rpart(medv ~., data=Boston,weights=NA)
rpart.Boston <- rpart::rpart(medv ~., data=Boston,weights=NULL)
library(dtree)
out <- dtree(medv ~., data=Boston)
out <- dtree(medv ~., data=Boston)
library(dtree)
library(dtree)
out <- dtree(medv ~., data=Boston)
library(dtree)
out <- dtree(medv ~., data=Boston)
library(dtree)
out <- dtree(medv ~., data=Boston)
formula= ~ .
data=Boston
perc.sub=.5
ids <- sample(nrow(data),nrow(data)*perc.sub)
data.train <- data[ids,]
data.test <- data[-ids,]
rpart.out <- rpart(formula,data=data.train)
library(rpart)
rpart.out <- rpart(formula,data=data.train)
head(data.train)
?rpart
evtree.out <- evtree(formula,data=data.train)
library(evtree)
evtree.out <- evtree(formula,data=data.train)
library(party)
ctree.out <- ctree(formula,data,data=data.train)
str(data.train)
?ctree
ctree.out <- ctree(formula,data=data.train)
ctree.Boston <- party::ctree(medv ~., data=Boston)
ctree.out <- party::ctree(formula,data=data.train)
str(data.train)
formula
formula = medv ~ .
ctree.out <- party::ctree(formula,data=data.train)
ctree.out <- ctree(formula,data=data.train)
rpart.out <- rpart(formula,data=data.train)
out <- dtree(medv ~., data=Boston)
library(dtree)
out <- dtree(medv ~., data=Boston)
out
library(dtree)
out <- dtree(medv ~., data=Boston)
out
plot(out$rpart.out)
plot(out$rpart.out);text(out$rpart.out)
plot(out$evtree.out);text(out$evtree.out)
plot(out$ctree.out);text(out$ctree.out)
plot(out$evtree.out)
plot(out$ctree.out)
library(dtree)
rpart.out <- rpart(formula,data=data.train)
summary(rpart.out)
str(rpart.out)
complexity <- matrix(NA,3,3)
colnames(complexity) <- c("rpart","evtree","ctree")
plot(rpart.out)
rpart.out$splits
complexity <- matrix(NA,3,3)
rownames(complexity) <- c("rpart","evtree","ctree")
colnames(complexity) <- c("nodes","splits","fit")
complexity
summary(rpart.out)
str(summary(rpart.out))
cptable(rpart.out)
rsq.rpart(rpart.out)
printcp(rpart.out)
attr(terms(getResponseFormula(formula)),"term.labels")
library(nlme)
getResponseFormula
getResponseFormula <- function (object)
{
form <- formula(object)
if (!(inherits(form, "formula") && (length(form) == 3))) {
stop("'form' must be a two-sided formula")
}
eval(parse(text = paste("~", deparse(form[[2]]))))
}
attr(terms(getResponseFormula(formula)),"term.labels")
response <- attr(terms(getResponseFormula(formula)),"term.labels")
response <- attr(terms(getResponseFormula(formula)),"term.labels")
cor(pred1,data.train[,response])**2
pred1 <- predict(rpart.out)
cor(pred1,data.train[,response])**2
class(data.train[,response])
class.respone <- class(data.train[,response])
complexity <- matrix(NA,3,5)
rownames(complexity) <- c("rpart","evtree","ctree")
colnames(complexity) <- c("nodes","splits","fit.cv","fit.train","fit.test")
library(caret)
printcp(rpart.out)
str(printcp(rpart.out))
min.error <- min(printcp(rpart.out)[,"xerror"])
?silent
min.error
min.error <- which(min(cp[,"xerror"]) == cp[,"xerror"])
cp <- printcp(rpart.out)
min.error <- which(min(cp[,"xerror"]) == cp[,"xerror"])
min.error
cp[1,]
min.error <- which(min(cp[,"xerror"]) == cp[,"xerror"])[1]
min.error
cp[min.error,]
complexity["rpart","nsplit"] <- cp[min.error,"nsplit"]
complexity["rpart","nsplits"] <- cp[min.error,"nsplit"]
cp[min.error,"nsplit"]
complexity["rpart","nsplits"]
complexity <- matrix(NA,3,6)
rownames(complexity) <- c("rpart","evtree","ctree")
colnames(complexity) <- c("nodes","nvar","nsplits","fit.cv","fit.train","fit.test")
cp <- printcp(rpart.out)
min.error <- which(min(cp[,"xerror"]) == cp[,"xerror"])[1]
complexity["rpart","nsplits"] <- cp[min.error,"nsplit"]
complexity
cp[min.error,"rel error"]
rsq.rpart(rpart.out)
rpart.ret <- prune.rpart(rpart.out,cp[min.error,"CP"])
plot(rpart.ret)
sum(predict(rpart.ret,data.test) - data.test[,response])**2)
sum((predict(rpart.ret,data.test) - data.test[,response])**2)
mean((predict(rpart.ret,data.test) - data.test[,response])**2)
mean((predict(rpart.ret,data.test) - data.test[,response])**2)/nrow(data.test)
mean((predict(rpart.ret,data.test) - data.test[,response])**2)
cor((predict(rpart.ret,data.test) - data.test[,response])**2)
cor((predict(rpart.ret,data.test) - data.test[,response]))**2
cor(predict(rpart.ret,data.test),data.test[,response]))**2
cor(predict(rpart.ret,data.test),data.test[,response])**2
library(dtree)
out <- dtree(medv ~., data=Boston)
library(dtree)
out <- dtree(medv ~., data=Boston)
cp <- invisible(printcp(rpart.out))
invisible(cp <- printcp(rpart.out))
cp <- printcp(rpart.out,print=FALSE)
cp <- printcp(rpart.out,verbose=FALSE)
?printcp
str(rpart.out)
cp <- rpart.out$cptable
cp
library(dtree)
library(dtree)
out <- dtree(medv ~., data=Boston)
summary(out)
out$complexity
library(dtree)
summary(out)
library(dtree)
summary(out)
str(rpart.ret)
importance(rpart.ret)
summary(rpart.ret)
str(rpart.ret)
rpart.ret
?rpart
library(dtree)
str(rpart.ret)
rpart.ret$variable.importance
rpart.ret$ordered
rpart.ret$cptable
rpart.ret$splits
rpart.ret$frame
rpart.ret$frame[,"var"]
unique(rpart.ret$frame[,"var"])
length(unique(rpart.ret$frame[,"var"]))
rpart.ret$frame[,"var"])
vars <- rpart.ret$frame[,"var"]
vars
vars != "<leaf>"
vars2 <- vars[vars != "<leaf>"]
length(unique(vars2))
library(dtree)
out <- dtree(medv ~., data=Boston)
out$complexity
rpart.ret$frame
length(vars2)
length(vars[vars == "<leaf>"])
library(dtree)
out <- dtree(medv ~., data=Boston)
summary(out)
printcp(rpart.out)
library(dtree)
