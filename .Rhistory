library(dtree)
library(dtree)
library(dtree)
library(dtree)
library(dtree)
library(dtree)
library(dtree)
library(dtree)
library(dtree)
library(dtree)
library(dtree)
library(dtree)
install.packages("ISLR")
library(ISLR)
install.packages("ISLR")
library(ISLR)
data(Default)
str(Default)
lr.out <- glm(default~.,family="binomial",data=Default)
summary(lr.out)
?evtree
1 - mean(predict(lr.out) == Default$default)
Default$default
predict(lr.out)
1 - mean(predict(lr.out,type="response") == Default$default)
predict(lr.out,type="response")
?predict.glm
predict(lr.out,type="terms")
predict(lr.out)
round(predict(lr.out))
round(predict(lr.out,type="link"))
round(predict(lr.out,type="response"))
round(predict(lr.out,type="response")) == Default$default
Default$default
1 - mean(round(predict(lr.out,type="response")) == as.numeric(Default$default))
as.numeric(Default$default)
round(predict(lr.out,type="response"))
round(predict(lr.out,type="response"))+1
1 - mean(round(predict(lr.out,type="response"))+1 == as.numeric(Default$default))
round(predict(lr.out,type="response"))+1
mean(round(predict(lr.out,type="response"))+1 == as.numeric(Default$default))
summary(lr.out)
library(dtree)
out <- dtree(default ~ ., data=Default)
library(dtree)
out <- dtree(default ~ ., data=Default)
library(dtree)
out <- dtree(default ~ ., data=Default)
Default$default
str(Default)
library(dtree)
out <- dtree(default ~ ., data=Default)
out <- dtree(default ~ ., data=Default)
library(dtree)
library(dtree)
out <- dtree(default ~ ., data=Default)
library(dtree)
?dtree
out <- dtree(default ~ ., data=Default,methods=c("lm","rpart"))
out <- dtree(default ~ ., data=Default,methods=c("lm"))
summary(out)
library(dtree)
out2 <- rpart(default ~ ., data=Default)
summary(out)
out2
rpart.out=out2
cp <- rpart.out$cptable
min.error <- which(min(cp[,"xerror"]) == cp[,"xerror"])[1]
return.matrix[1,"nsplits"] <- cp[min.error,"nsplit"]
cp[min.error,"xerror"]
predict(out2)
library(dtree)
out <- dtree(default ~ ., data=Default,methods=c("lm","rpart"))
summary(out)
evtree.out <- evtree::evtree(default ~ ., data=Default)
evtree.out
predict(evtree.out)
as.numeric(predict(evtree.out))
library(dtree)
out <- dtree(default ~ ., data=Default,methods=c("lm","rpart","evtree"))
summary(out)
plot(out$evtree.out)
library(dtree)
library(dtree)
library(dtree)
library(dtree)
library(MASS) # for boston data
data(Boston)
out <- dtree(medv ~., data=Boston,methods=c("lm","rpart","ctree"))
str(Boston)
class(Boston[,"medv"])
traceback()
library(dtree)
out <- dtree(medv ~., data=Boston,methods=c("lm","rpart","ctree"))
out <- dtree(medv ~., data=Boston,methods=c("lm","rpart","ctree"))
summary(out)
out <- dtree(default ~ ., data=Default,methods=c("lm","rpart"))
summary(out)
lm.out <- glm(formula,family=binomial,data.train)
lr.out <- glm(default~.,family="binomial",data=Default)
str(lr.out)
summary(lr.out)
str(summary(lr.out))
summary(lr.out)$coefficients
summary(lr.out)$coefficients[,"Pr(>|z|)"]
summary(lr.out)$coefficients[,"Pr(>|z|)"][-1]
sum(summary(lr.out)$coefficients[,"Pr(>|z|)"][-1] < .05)
library(dtree)
lr.out <- glm(default~.,family="binomial",data=Default)
out <- dtree(default ~ ., data=Default,methods=c("lm","rpart"))
summary(out)
out <- dtree(default ~ ., data=Default,methods=c("lm","rpart","ctree"))
library(dtree)
out <- dtree(default ~ ., data=Default,methods=c("lm","rpart","ctree"))
summary(out)
predict(out$ctree.out)
out <- dtree(default ~ ., data=Default,methods=c("lm","rpart","ctree","evtree"))
summary(out)
plot(out$ctree.out)
plot(out$evtree.out)
library(dtree)
library(dtree)
out <- dtree(default ~ ., data=Default,methods=c("lm","rpart","tree"))
summary(out)
data=Default
formula= default ~ .
methods="tree"
ret <- list()
perc.sub=.7
ids <- sample(nrow(data),nrow(data)*perc.sub)
data.train <- data[ids,]
data.test <- data[-ids,]
getResponseFormula <- function (object)
{
form <- formula(object)
if (!(inherits(form, "formula") && (length(form) == 3))) {
stop("'form' must be a two-sided formula")
}
eval(parse(text = paste("~", deparse(form[[2]]))))
}
response <- attr(terms(getResponseFormula(formula)),"term.labels")
class.response <- class(data.train[,response])
if(class.response == "numeric" | class.response == "integer"){
return.matrix <- matrix(NA,length(methods),8)
rownames(return.matrix) <- methods
colnames(return.matrix) <- c("nodes","nvar","nsplits","misfit.cv",
"misfit.train","rsq.train","misfit.test","rsq.test")
}else{
return.matrix <- matrix(NA,length(methods),6)
rownames(return.matrix) <- methods
colnames(return.matrix) <- c("nodes","nvar","nsplits","accuracy.cv",
"accuracy.train","accuracy.test")
}
ret <- list()
if(class.response == "numeric" | class.response == "integer"){
return.matrix <- matrix(NA,1,8)
colnames(return.matrix) <- c("nodes","nvar","nsplits","misfit.cv",
"misfit.train","rsq.train","misfit.test","rsq.test")
}else{
return.matrix <- matrix(NA,1,6)
colnames(return.matrix) <- c("nodes","nvar","nsplits","accuracy.cv",
"accuracy.train","accuracy.test")
}
tree1 <- tree::tree(formula,data.train)
cv1 <- tree::cv.tree(tree1)
min.loc <- which(min(cv1$dev) == cv1$dev)
return.matrix[1,"nodes"] <- cv1$size[min.loc]
pruned.tree <- tree::prune.tree(tree1,cv1$k[min.loc])
return.matrix[1,"fit.cv"] <- cv1$dev[min.loc]/nrow(data.train)
if(class.response == "numeric" | class.response == "integer"){
#return.matrix[1,"misfit.cv"] <- cp[min.error,"xerror"]
return.matrix[1,"misfit.train"] <- mean((data.train[,response] - predict(tree1))^2)/nrow(data.train)
return.matrix[1,"misfit.test"] <- mean((data.test[,response] -
predict(tree1,data.test))^2)/nrow(data.test)
return.matrix[1,"rsq.train"] <- (cor(data.train[,response],predict(rpart.out)))**2
return.matrix[1,"rsq.test"] <- (cor(data.test[,response],predict(rpart.out,data.test)))**2
}else{
return.matrix[1,"accuracy.cv"] <- cp[min.error,"xerror"]
return.matrix[1,"accuracy.train"] <- mean(round(predict(tree1)[,2])+1 == as.numeric(data.train[,response]))
return.matrix[1,"accuracy.test"] <- mean(round(predict(tree1 ,data.test)[,2])+1 == as.numeric(data.test[,response]))
}
library(dtree)
out <- dtree(default ~ ., data=Default,methods=c("lm","rpart","tree"))
summary(out)
return.matrix
cp[min.error,"xerror"]
mean(round(predict(tree1)[,2])+1 == as.numeric(data.train[,response]))
predict(tree1)
str(tree1)
return.matrix[1,"accuracy.train"] <- mean(round(predict(tree1)[,2])+1 == as.numeric(data.train[,response]))
mean(round(predict(tree1)[,2])+1 == as.numeric(data.train[,response]))
mean(round(predict(tree1 ,data.test)[,2])+1 == as.numeric(data.test[,response]))
pruned.tree
cv1$k
which(min(cv1$dev) == cv1$dev)
return.matrix[1,"accuracy.train"] <- mean(round(predict(pruned.tree)[,2])+1 == as.numeric(data.train[,response]))
pruned.tree <- tree::prune.tree(tree1,cv1$k[min.loc])
pruned.tree
predict(pruned.tree)
?prune.tree
plot(pruned.tree)
plot(cv1)
predict(cv1)
?prune.tree
data(fgl, package="MASS")
fgl.tr <- tree(type ~ ., fgl)
plot(print(fgl.tr))
fgl.cv <- cv.tree(fgl.tr,, prune.tree)
for(i in 2:5)  fgl.cv$dev <- fgl.cv$dev +
cv.tree(fgl.tr,, prune.tree)$dev
fgl.cv$dev <- fgl.cv$dev/5
plot(fgl.cv)
library(tree)
data(fgl, package="MASS")
fgl.tr <- tree(type ~ ., fgl)
plot(print(fgl.tr))
fgl.cv <- cv.tree(fgl.tr,, prune.tree)
for(i in 2:5)  fgl.cv$dev <- fgl.cv$dev +
cv.tree(fgl.tr,, prune.tree)$dev
fgl.cv$dev <- fgl.cv$dev/5
plot(fgl.cv)
?plot.tree
plot(tree1)
?tree
?prune.tree
cv1$k[min.loc]
pruned.tree <- tree::prune.tree(tree1,k=cv1$k[min.loc])
plot(pruned.tree)
pruned.tree <- tree::prune.tree(tree1,best=4)#k=cv1$k[min.loc])
plot(pruned.tree)
cv1
cv1$size[min.loc]
pruned.tree <- tree::prune.tree(tree1,best=cv1$size[min.loc])
predict(pruned.tree)
pruned.tree
str(pruned.tree)
pruned.tree$frame
pruned.tree$frame[,"var"]
unique(pruned.tree$frame[,"var"])
unique(pruned.tree$frame[,"var"])[-"<leaf>"]
unique(pruned.tree$frame[,"var"])[!"<leaf>"]
unique(pruned.tree$frame[,"var"]) == "<leaf>"
uniq <- unique(pruned.tree$frame[,"var"])
uniq[uniq != "<leaf>"]
length(uniq[uniq != "<leaf>"])
nrow(pruned.tree$frame[,"var"]) - cv1$size[min.loc]
nrow(pruned.tree$frame[,"var"])
length(pruned.tree$frame[,"var"]) - cv1$size[min.loc]
library(dtree)
out <- dtree(default ~ ., data=Default,methods=c("lm","rpart","tree"))
summary(out)
ret <- list()
if(class.response == "numeric" | class.response == "integer"){
return.matrix <- matrix(NA,1,8)
colnames(return.matrix) <- c("nodes","nvar","nsplits","misfit.cv",
"misfit.train","rsq.train","misfit.test","rsq.test")
}else{
return.matrix <- matrix(NA,1,6)
colnames(return.matrix) <- c("nodes","nvar","nsplits","accuracy.cv",
"accuracy.train","accuracy.test")
}
tree1 <- tree::tree(formula,data.train)
cv1 <- tree::cv.tree(tree1)
min.loc <- which(min(cv1$dev) == cv1$dev)
return.matrix[1,"nodes"] <- cv1$size[min.loc]
pruned.tree <- tree::prune.tree(tree1,best=cv1$size[min.loc])
return.matrix[1,"nodes"] <- cv1$size[min.loc]
uniq <- unique(pruned.tree$frame[,"var"])
return.matrix[1,"nvar"] <- length(uniq[uniq != "<leaf>"])
return.matrix[1,"nsplits"] <- length(pruned.tree$frame[,"var"]) - cv1$size[min.loc]
#vars <- rpart.ret$frame[,"var"]
#vars2 <- vars[vars != "<leaf>"]
#return.matrix[1,"nvar"] <- length(unique(vars2))
if(class.response == "numeric" | class.response == "integer"){
#return.matrix[1,"misfit.cv"] <- cp[min.error,"xerror"]
return.matrix[1,"misfit.train"] <- mean((data.train[,response] - predict(pruned.tree))^2)/nrow(data.train)
return.matrix[1,"misfit.test"] <- mean((data.test[,response] -
predict(pruned.tree,data.test))^2)/nrow(data.test)
return.matrix[1,"rsq.train"] <- (cor(data.train[,response],predict(pruned.tree)))**2
return.matrix[1,"rsq.test"] <- (cor(data.test[,response],predict(pruned.tree,data.test)))**2
}else{
#return.matrix[1,"accuracy.cv"] <- cp[min.error,"xerror"]
return.matrix[1,"accuracy.train"] <- mean(round(predict(pruned.tree)[,2])+1 == as.numeric(data.train[,response]))
return.matrix[1,"accuracy.test"] <- mean(round(predict(pruned.tree ,data.test)[,2])+1 == as.numeric(data.test[,response]))
}
return.matrix
out <- dtree(default ~ ., data=Default,methods=c("lm","rpart","tree"))
library(dtree)
out <- dtree(default ~ ., data=Default,methods=c("lm","rpart","tree"))
summary(out)
plot(out$tree.out)
out <- dtree(default ~ ., data=Default,methods=c("lm","rpart","tree","rf"))
install.packages("e1071")
library(dtree)
out <- dtree(default ~ ., data=Default,methods=c("lm","rpart","tree","rf"))
library(dtree)
out <- dtree(default ~ ., data=Default,methods=c("lm","rpart","tree","rf"))
if(class.response == "numeric" | class.response == "integer"){
return.matrix <- matrix(NA,1,8)
colnames(return.matrix) <- c("nodes","nvar","nsplits","misfit.cv",
"misfit.train","rsq.train","misfit.test","rsq.test")
}else{
return.matrix <- matrix(NA,1,6)
colnames(return.matrix) <- c("nodes","nvar","nsplits","accuracy.cv",
"accuracy.train","accuracy.test")
}
if(class.response == "numeric" | class.response == "integer"){
rf.out <- train(formula,data.train,method="rf",
trControl=trainControl(method="cv"),importance=TRUE)
}else{
rf.out <- train(formula,data.train,method="rf",metric="Accuracy",
trControl=trainControl(method="cv"),importance=TRUE)
}
predict(rf.out)
mean(round(predict(rf.out))+1 == as.numeric(data.train[,response]))
mean(predict(rf.out) == data.train[,response])
mean(predict(rf.out,data.test) == data.test[,response])
rf.out
str(rf.out)
max(rf.out$results$Accuracy)
library(dtree)
out <- dtree(default ~ ., data=Default,methods=c("lm","rpart","tree","rf"))
summary(out)
out <- dtree(default ~ ., data=Default,methods=c("lm","rpart","tree","rf","evtree","ctree"))
summary(out)
cv1
?cv.tree
cv1 <- tree::cv.tree(tree1,prune.tree)
cv.tree(tree1,prune.tree)
cv1 <- tree::cv.tree(tree1,,prune.tree)
cv1
?tree
train(formula,data.train,method="tree",metric="Accuracy",
trControl=trainControl(method="cv"),importance=TRUE)
library(dtree)
library(dtree)
library(ISLR)
data(Default)
lr.out <- glm(default~.,family="binomial",data=Default)
summary(lr.out)
summary(lr.out)$coefficients[,"Pr(>|z|)"][-1]
round(predict(lr.out,type="response"))
mean(round(predict(lr.out,type="response"))+1 == as.numeric(Default$default))
out <- dtree(default ~ ., data=Default,methods=c("lm","rpart","tree","rf","evtree","ctree"))
summary(out)
library(dtree)
library(dtree)
?stability
ret <- stability(default ~ ., data=Default,methods=c("lm","rpart","evtree","ctree"))
library(dtree)
ret <- stability(default ~ ., data=Default,methods=c("lm","rpart","evtree","ctree"))
ret <- stability(default ~ ., data=Default,methods=c("lm","rpart","ctree"))
ret
library(dtree)
ret <- stability(default ~ ., data=Default,methods=c("lm","rpart","ctree"))
ret
?lapply
lapply(ret,mean)
unlist(ret)
?unlist
rett <- unlist(ret)
matrix(rett,100,18)
matrix(rett,100,18,byrow=FALSE)
matrix(rett,100,18,byrow=TRUE)
results <- matrix(rett,100,18,byrow=TRUE)
ret[[1]]
dim(ret[[1]])
dimm <- dim(ret[[1]])
dimm2 <- dimm[1]*dimm[2]
dimm2
library(dtree)
library(dtree)
ret <- stability(default ~ ., data=Default,methods=c("lm","rpart","ctree"))
library(dtree)
ret <- stability(default ~ ., data=Default,methods=c("lm","rpart","ctree"))
out=ret
rett <- unlist(out)
dimm <- dim(rett[[1]])
dimm2 <- dimm[1]*dimm[2]
results <- matrix(rett,n.rep,dimm2,byrow=TRUE)
n.rep=100
results <- matrix(rett,n.rep,dimm2,byrow=TRUE)
dimm2
dimm[1]
dimm
rett[[1]]
rett
dimm <- dim(out[[1]])
dimm2 <- dimm[1]*dimm[2]
results <- matrix(rett,n.rep,dimm2,byrow=TRUE)
library(dtree)
ret <- stability(default ~ ., data=Default,methods=c("lm","rpart","ctree"))
ret
results <- matrix(rett,100,18,byrow=FALSE)
results
ret
out <- list()
for(i in 1:n.rep){
out[[i]] <- dtree(formula,data,methods,weights,perc.sub,prune)$return.matrix
}
rett <- unlist(out)
dimm <- dim(out[[1]])
dimm2 <- dimm[1]*dimm[2]
results <- matrix(rett,n.rep,dimm2,byrow=TRUE)
results
methods=c("lm","rpart","ctree")
library(dtree)
ret <- stability(default ~ ., data=Default,methods=c("lm","rpart","ctree"))
ret
unlist(ret)
out = ret
rett <- unlist(out)
dimm <- dim(out[[1]])
dimm2 <- dimm[1]*dimm[2]
results <- matrix(rett,n.rep,dimm2,byrow=FALSE)
results
out
results <- matrix(rett,n.rep,dimm2,byrow=TRUE)
results
len <- length(methods)
len
results <- matrix(rett,n.rep,dimm2,byrow=FALSE)
results
rett
out
library(dtree)
ret <- stability(default ~ ., data=Default,methods=c("lm","rpart","ctree"))
out <- array(n.rep,8,length(methods))
library(dtree)
ret <- stability(default ~ ., data=Default,methods=c("lm","rpart","ctree"))
?rray
?array
out <- array(NA, dim=c(n.rep,8,length(methods)))
out
ret <- stability(default ~ ., data=Default,methods=c("lm","rpart","ctree"))
library(dtree)
i
out[i,,] <- dtree(formula,data,methods,weights,perc.sub,prune)$return.matrix
dtree(formula,data,methods,weights,perc.sub,prune)$return.matrix
prun=TRUE
prune=TRUE
dtree(formula,data,methods,weights,perc.sub,prune)$return.matrix
out[i,,] <- dtree(formula,data,methods,weights,perc.sub,prune)$return.matrix
dim(out)
out <- array(NA, dim=c(n.rep,6,length(methods)))
out[i,,] <- dtree(formula,data,methods,weights,perc.sub,prune)$return.matrix
out <- list()
out <- list()
for(i in 1:n.rep){
out[[i]] <- dtree(formula,data,methods,weights,perc.sub,prune)$return.matrix
}
ncol(out[[1]])
ret <- array(NA, dim=c(n.rep,ncol(out[[1]]),length(methods)))
for(j in 1:n.rep){
ret[i,,] <- out[[i]]
}
ret
out[[i]]
n.rep
out
for(j in 1:n.rep){
ret[j,,] <- out[[j]]
}
ret
out[[1]]
ret[1,,]
ret <- array(NA, dim=c(n.rep,length(methods),ncol(out[[1]])))
for(j in 1:n.rep){
ret[j,,] <- out[[j]]
}
ret
apply(ret,1,mean)
apply(ret,1,mean,na.rm=TRUE)
apply(ret,2,mean,na.rm=TRUE)
apply(ret,3,mean,na.rm=TRUE)
apply(ret,4,mean,na.rm=TRUE)
apply(ret,1,colmean,na.rm=TRUE)
apply(ret,1,colMeans,na.rm=TRUE)
apply(ret,2,colMeans,na.rm=TRUE)
apply(ret,3,colMeans,na.rm=TRUE)
ret
colMeans(ret[,,1])
apply(ret,3,colMeans,na.rm=TRUE)
colMeans(ret[,,2])
?colSds
library(dtree)
ret.mean <- apply(ret,3,colMeans,na.rm=TRUE)
ret.mean
row.names(ret.mean) <- methods
ret.mean
names(out[[i]])
colnames(out[[i]])
colnames(ret.mean) <- colnames(out[[i]])
colnames(ret.var) <- colnames(out[[i]])
ret.var <- apply(ret,3,colVars,na.rm=TRUE)
install.packages("matrixStats")
library(dtree)
ret.var <- apply(ret,3,colVars,na.rm=TRUE)
ret <- stability(default ~ ., data=Default,methods=c("lm","rpart","ctree"))
ret.var <- apply(ret,3,matrixStats::colVars,na.rm=TRUE)
library(dtree)
ret <- stability(default ~ ., data=Default,methods=c("lm","rpart","ctree"))
library(dtree)
ret
ret <- stability(default ~ ., data=Default,methods=c("lm","rpart","ctree"))
library(dtree)
ret <- stability(default ~ ., data=Default,methods=c("lm","rpart","ctree"))
library(dtree)
ret <- stability(default ~ ., data=Default,methods=c("lm","rpart","ctree"))
ret
ret <- stability(default ~ ., data=Default,methods=c("lm","rpart","ctree","evtree"))
ret
