{
    "collab_server" : "",
    "contents" : "#' Main function for creating different types of decision trees\n#'\n#' @param formula a formula, weight a response to left of ~.\n#' @param data Data frame to run models on\n#' @param methods Which tree methods to use. Defaults to all:\n#'        rpart, tree, ctree, evtree\n#' @param weights Optional weights for each case.\n#' @param frac.sub What fraction of data to put into train dataset. 1-frac.sub\n#'        is allocated to test dataset.\n#' @param prune Whether to prune rpart tree\n#'\n#' @export\n#' @import rpart\n#' @import tree\n#' @import party\n#' @import evtree\n#' @import caret\n#'\n\n\ndtree = function(formula,\n                 data,\n                 methods=c(\"rpart\",\"tree\",\"ctree\",\"evtree\"),\n                 weights,\n                 perc.sub=.5,\n                 prune=TRUE){\n\n  ret <- list()\n\n  return.matrix <- matrix(NA,length(methods),8)\n  rownames(return.matrix) <- methods\n  colnames(return.matrix) <- c(\"nodes\",\"nvar\",\"nsplits\",\"misfit.cv\",\"misfit.train\",\"rsq.train\",\"misfit.test\",\"rsq.test\")\n\n\n  ids <- sample(nrow(data),nrow(data)*perc.sub)\n  data.train <- data[ids,]\n  data.test <- data[-ids,]\n\n\n\n  # parse out the response variable name\n  getResponseFormula <- function (object)\n  {\n    form <- formula(object)\n    if (!(inherits(form, \"formula\") && (length(form) == 3))) {\n      stop(\"'form' must be a two-sided formula\")\n    }\n    eval(parse(text = paste(\"~\", deparse(form[[2]]))))\n  }\n\n  response <- attr(terms(getResponseFormula(formula)),\"term.labels\")\n  # ------------------------------------------------------------------\n\n\n  class.response <- class(data.train[,response])\n\n\n\n  # ------------------------------------------------------------------\n\n  # Rpart\n\n  # ----------------------------------------------------------------\n\n\n  if(any(methods==\"rpart\")){\n\n  ret1 <- rpart_ret(formula, data.train,data.test, prune, class.response,response)\n  return.matrix[\"rpart\",] <- ret1$vec\n  ret$rpart.out <- ret1$rpart.ret\n\n\n\n  }\n\n  # --------------------------------------------------\n\n  # Tree\n\n  # --------------------------------------------------\n\n  if(any(methods == \"tree\")){\n\n\n\n\n  }\n\n  # ----------------------------------------------------\n\n  # Ctree\n\n  # ----------------------------------------------------\n\n  if(any(methods == \"ctree\")){\n    ret3 <- ctree_ret(formula, data.train,data.test, class.response,response)\n    return.matrix[\"ctree\",] <- ret3$vec\n    ret$ctree.out <- ret3$ctree.ret\n  }\n\n\n  #----------------------------------------------------\n\n  # Evtree\n\n  # ---------------------------------------------------\n\n  if(any(methods == \"evtree\")){\n    ret4 <- evtree_ret(formula, data.train,data.test, class.response,response)\n    return.matrix[\"evtree\",] <- ret4$vec\n    ret$evtree.out <- ret4$evtree.ret\n  }\n\n\n\n  ret$response.type <- class.response\n  ret$return.matrix <- return.matrix\n  ret$call <- match.call()\n  class(ret) <- \"dtree\"\n  return(ret)\n\n}\n",
    "created" : 1482845986882.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3097501710",
    "id" : "71CA46EE",
    "lastKnownWriteTime" : 1482845212,
    "last_content_update" : 1482845212,
    "path" : "~/GitHub/dtree/R/dtree.R",
    "project_path" : "R/dtree.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}